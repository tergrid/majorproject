/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import n from"./RandomLCG.js";const t=1.5,e=1/t,r=.5;function o(n,t){if(!t)return n;for(const e of t)n.push(e);return n}function l(n){if(!n)return;return n.length>0?n[0]:void 0}function u(n){if(!n)return;const t=n.length;return t>0?n[t-1]:void 0}function f(n,t){for(let e=n.length-1;e>=0;e--){const r=n[e];if(t(r))return r}}function i(n){return n}function c(n,t=i){if(!n||0===n.length)return;let e=n[0],r=t(e);for(let o=1;o<n.length;++o){const l=n[o],u=Number(t(l));u>r&&(r=u,e=l)}return e}function s(n,t=i){return c(n,(n=>-t(n)))}function h(n,t){return t?n.filter(((n,e,r)=>r.findIndex(t.bind(null,n))===e)):Array.from(new Set(n))}function a(n,t,e){if(null==n&&null==t)return!0;if(null==n||null==t||n.length!==t.length)return!1;if(e){for(let r=0;r<n.length;r++)if(!e(n[r],t[r]))return!1}else for(let r=0;r<n.length;r++)if(n[r]!==t[r])return!1;return!0}function g(n,t){let e=n.length!==t.length;e&&(n.length=t.length);for(let r=0;r<t.length;++r)n[r]!==t[r]&&(n[r]=t[r],e=!0);return e}function d(n,t,e){let r,o;return e?(r=t.filter((t=>!n.some((n=>e(n,t))))),o=n.filter((n=>!t.some((t=>e(t,n)))))):(r=t.filter((t=>!n.includes(t))),o=n.filter((n=>!t.includes(n)))),{added:r,removed:o}}function p(n,t,e){return n&&t?e?n.filter((n=>t.findIndex((t=>e(n,t)))>-1)):n.filter((n=>t.includes(n))):[]}function m(n){return n&&"number"==typeof n.length}function w(n,t){const e=n.length;if(0===e)return[];const r=[];for(let o=0;o<e;o+=t)r.push(n.slice(o,o+t));return r}const M=!!Array.prototype.fill;function y(n,t){if(M)return new Array(n).fill(t);const e=new Array(n);for(let r=0;r<n;r++)e[r]=t;return e}function x(n,t){void 0===t&&(t=n,n=0);const e=new Array(t-n);for(let r=n;r<t;r++)e[r-n]=r;return e}function A(n,t,e){const r=n.length;let o=0,l=r-1;for(;o<l;){const e=o+Math.floor((l-o)/2);t>n[e]?o=e+1:l=e}const u=n[o];return e?t>=n[r-1]?-1:u===t?o:o-1:u===t?o:-1}function v(n,t,e){if(!n||0===n.length)return;const r=n.length-1,o=n[0];if(t<=e(o))return o;const l=n[r];if(t>=e(l))return l;let u=0,f=0,i=r;for(;u<i;){f=u+Math.floor((i-u)/2);const o=n[f],l=e(o);if(l===t)return o;if(t<l){if(f>0){const r=n[f-1],u=e(r);if(t>u)return t-u>=l-t?o:r}i=f}else{if(f<r){const r=n[f+1],u=e(r);if(t<u)return t-l>=u-t?r:o}u=f+1}}return n[f]}class b{constructor(){this.last=0}}const S=new b;function z(n,t,e,r){r=r||S;const o=Math.max(0,r.last-10);for(let u=o;u<e;++u)if(n[u]===t)return r.last=u,u;const l=Math.min(o,e);for(let u=0;u<l;++u)if(n[u]===t)return r.last=u,u;return-1}function I(n,t,e,r){const o=e??n.length,l=z(n,t,o,r);if(-1!==l)return n[l]=n[o-1],null==e&&n.pop(),t}const j=new Set;function C(n,t,e=n.length,r=t.length,o,l){if(0===r||0===e)return e;j.clear();for(let f=0;f<r;++f)j.add(t[f]);o=o||S;const u=Math.max(0,o.last-10);for(let f=u;f<e;++f)if(j.has(n[f])&&(l?.push(n[f]),j.delete(n[f]),n[f]=n[e-1],--e,--f,0===j.size||0===e))return j.clear(),e;for(let f=0;f<u;++f)if(j.has(n[f])&&(l?.push(n[f]),j.delete(n[f]),n[f]=n[e-1],--e,--f,0===j.size||0===e))return j.clear(),e;return j.clear(),e}function F(n,t){let e=0;for(let r=0;r<n.length;++r){const o=n[r];t(o,r)&&(n[e]=o,e++)}n.length=e}function G(n,t,e){const r=n.length;if(t>=r)return n.slice(0);const o=L(e),l=new Set,u=[];for(;u.length<t;){const t=Math.floor(o()*r);l.has(t)||(l.add(t),u.push(n[t]))}return u}function L(n){return n?(O.seed=n,()=>O.getFloat()):Math.random}function N(n,t){const e=L(t);for(let r=n.length-1;r>0;r--){const t=Math.floor(e()*(r+1)),o=n[r];n[r]=n[t],n[t]=o}return n}const O=new n;function R(n,t){const e=n.indexOf(t);return-1!==e?(n.splice(e,1),t):null}function k(n,t){const e=new Map,r=n.length;for(let o=0;o<r;o++){const r=n[o],l=t(r,o,n),u=e.get(l);u?u.push(r):e.set(l,[r])}return e}function q(n,t){return null!=n}const B=[];export{b as PositionHint,o as addMany,v as binaryFindClosest,A as binaryIndexOf,y as constant,d as difference,B as emptyArray,a as equals,F as filterInPlace,f as findLast,l as first,k as groupToMap,z as indexOf,p as intersect,m as isArrayLike,q as isSome,u as last,c as max,s as min,G as pickRandom,x as range,t as reallocGrowthFactor,e as reallocShrinkFactor,r as reallocShrinkThreshold,R as remove,I as removeUnordered,C as removeUnorderedMany,N as shuffle,w as splitIntoChunks,h as unique,g as update};
