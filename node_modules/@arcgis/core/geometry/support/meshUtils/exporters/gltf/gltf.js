/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import e from"../../../../../core/Error.js";import t from"../../../../../core/Logger.js";import{getOrCreateMapValue as s}from"../../../../../core/MapUtils.js";import{deg2rad as r}from"../../../../../core/mathUtils.js";import{getMetersPerCartesianUnitForSR as i}from"../../../../../core/unitUtils.js";import{scale as a}from"../../../../../core/libs/gl-matrix-2/math/mat4.js";import{IDENTITY as o,create as n}from"../../../../../core/libs/gl-matrix-2/factories/mat4f64.js";import{exactEquals as l}from"../../../../../core/libs/gl-matrix-2/math/quat.js";import{IDENTITY as c,clone as h}from"../../../../../core/libs/gl-matrix-2/factories/quatf64.js";import{j as f}from"../../../../../chunks/vec32.js";import{ZEROS as u,clone as m,ONES as p}from"../../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import d from"../../../MeshGeoreferencedVertexSpace.js";import g from"../../../MeshMaterialMetallicRoughness.js";import{ungeoreferenceByTransform as _,applyTransform as x}from"../../georeference.js";import{Buffer as T}from"./buffer.js";import{smoothNormals as R}from"./geometry.js";import{BufferOutputType as A,ImageOutputType as b,AttributeType as E,TargetBuffer as M,AlphaMode as O}from"./types.js";import{imageToArrayBuffer as w,imageToDataURI as I}from"./imageutils.js";import{isEncodedMeshTexture as N}from"../../../../../views/3d/glTF/internal/resourceUtils.js";import{DataType as B,TextureWrapMode as C}from"../../../../../views/webgl/enums.js";const L=()=>t.getLogger("gltf");class S{constructor(e,t,s){this.params={},this._materialMap=new Array,this._imageMap=new Map,this._textureMap=new Map,this.gltf={asset:{version:"2.0",copyright:e.copyright,generator:e.generator},extras:{options:t,binChunkBuffer:null,promises:[]}},s&&(this.params=s),this._addScenes(e)}_addScenes(e){this.gltf.scene=e.defaultScene;const t=this.gltf.extras,s=t.options.bufferOutputType===A.GLB||t.options.imageOutputType===b.GLB;s&&(t.binChunkBuffer=new T(this.gltf)),e.forEachScene((e=>{this._addScene(e)})),s&&t.binChunkBuffer.finalize()}_addScene(e){this.gltf.scenes||(this.gltf.scenes=[]);const t={};e.name&&(t.name=e.name),e.forEachNode((e=>{t.nodes||(t.nodes=[]),t.nodes.push(...this._addNodes(e))})),this.gltf.scenes.push(t)}_addNodes(e){this.gltf.nodes||(this.gltf.nodes=[]);const t={};e.name&&(t.name=e.name);const s=e.translation;f(s,u)||(t.translation=m(s));const r=e.rotation;l(r,c)||(t.rotation=h(r));const i=e.scale;f(i,p)||(t.scale=m(i));const a=this.gltf.nodes.length;if(this.gltf.nodes.push(t),e.mesh&&e.mesh.vertexAttributes.position){const s=this._createMeshes(e.mesh),r=[a];if(1===s.length)this._addMesh(t,s[0]);else for(const e of s){const t={};this._addMesh(t,e),r.push(this.gltf.nodes.length),this.gltf.nodes.push(t)}return r}return e.forEachNode((e=>{t.children||(t.children=[]),t.children.push(...this._addNodes(e))})),[a]}_addMesh(e,t){this.gltf.meshes??=[];const s=this.gltf.meshes.length;this.gltf.meshes.push(t),e.mesh=s}_createMeshes(t){const s=this.gltf.extras,r=s.options.bufferOutputType===A.GLB;let n;n=r?s.binChunkBuffer:new T(this.gltf),this.params.origin||(this.params.origin=t.anchor);const{ignoreLocalTransform:l}=this.params,c=l?null:t.transform,{vertexSpace:h,spatialReference:f}=t,u=h.origin,p=t.vertexAttributes;let g=null;if("local"===h.type){const e=i(f);a(v,c?.localMatrix??o,[e,e,e]),g=x(p,v)}else{const e=l?new d({origin:u?m(u):null}):h;g=_(p,e,c,this.params.origin,{geographic:this.params.geographic,unit:"meters"})}if(null==g)throw new e("Error during gltf export.");p.position&&g.position===p.position&&(g.position=p.position.slice()),p.normal&&g.normal===p.normal&&(g.normal=p.normal.slice()),p.tangent&&g.tangent===p.tangent&&(g.tangent=p.tangent.slice()),R(t,g),this._flipYZAxis(g);const b=n.addBufferView(B.FLOAT,E.VEC3,M.ARRAY_BUFFER);let O,w,I,N;g.normal&&(O=n.addBufferView(B.FLOAT,E.VEC3,M.ARRAY_BUFFER)),p.uv&&(w=n.addBufferView(B.FLOAT,E.VEC2,M.ARRAY_BUFFER)),g.tangent&&(I=n.addBufferView(B.FLOAT,E.VEC4,M.ARRAY_BUFFER)),p.color&&(N=n.addBufferView(B.UNSIGNED_BYTE,E.VEC4,M.ARRAY_BUFFER)),b.startAccessor("POSITION"),O&&O.startAccessor("NORMAL"),w&&w.startAccessor("TEXCOORD_0"),I&&I.startAccessor("TANGENT"),N&&N.startAccessor("COLOR_0");const C=g.position.length/3,{position:L,normal:S,tangent:y}=g,{color:F,uv:j}=p;for(let e=0;e<C;++e)b.push(L[3*e]),b.push(L[3*e+1]),b.push(L[3*e+2]),O&&null!=S&&(O.push(S[3*e]),O.push(S[3*e+1]),O.push(S[3*e+2])),w&&null!=j&&(w.push(j[2*e]),w.push(j[2*e+1])),I&&null!=y&&(I.push(y[4*e]),I.push(y[4*e+1]),I.push(y[4*e+2]),I.push(y[4*e+3])),N&&null!=F&&(N.push(F[4*e]),N.push(F[4*e+1]),N.push(F[4*e+2]),N.push(F[4*e+3]));const V=b.endAccessor(),D=this._addAccessor(b.index,V);let k,G,Y,U,P;if(O){const e=O.endAccessor();k=this._addAccessor(O.index,e)}if(w){const e=w.endAccessor();G=this._addAccessor(w.index,e)}if(I){const e=I.endAccessor();Y=this._addAccessor(I.index,e)}if(N){const e=N.endAccessor();U=this._addAccessor(N.index,e)}const z=[];return t.components&&t.components.length>0&&t.components[0].faces?(P=n.addBufferView(B.UNSIGNED_INT,E.SCALAR,M.ELEMENT_ARRAY_BUFFER),this._addMeshVertexIndexed(P,t.components,z,D,k,G,Y,U)):this._addMeshVertexNonIndexed(t.components,z,D,k,G,Y,U),b.finalize(),O&&O.finalize(),w&&w.finalize(),I&&I.finalize(),P&&P.finalize(),N&&N.finalize(),r||n.finalize(),z}_flipYZAxis({position:e,normal:t,tangent:s}){this._flipYZBuffer(e,3),this._flipYZBuffer(t,3),this._flipYZBuffer(s,4)}_flipYZBuffer(e,t){if(null!=e)for(let s=1,r=2;s<e.length;s+=t,r+=t){const t=e[s],i=e[r];e[s]=i,e[r]=-t}}_addMaterial(e){if(null===e)return;const t=this._materialMap.indexOf(e);if(-1!==t)return t;this.gltf.materials||(this.gltf.materials=[]);const s={};switch(e.alphaMode){case"mask":s.alphaMode=O.MASK;break;case"auto":case"blend":s.alphaMode=O.BLEND}.5!==e.alphaCutoff&&(s.alphaCutoff=e.alphaCutoff),e.doubleSided&&(s.doubleSided=e.doubleSided),s.pbrMetallicRoughness={};const r=e=>e**2.1,i=e=>{const t=e.toRgba();return t[0]=r(t[0]/255),t[1]=r(t[1]/255),t[2]=r(t[2]/255),t};if(null!=e.color&&(s.pbrMetallicRoughness.baseColorFactor=i(e.color)),null!=e.colorTexture&&(s.pbrMetallicRoughness.baseColorTexture=this._createTextureInfo(e.colorTexture,e.colorTextureTransform)),null!=e.normalTexture&&(s.normalTexture=this._createTextureInfo(e.normalTexture,e.normalTextureTransform)),e instanceof g){if(null!=e.emissiveTexture&&(s.emissiveTexture=this._createTextureInfo(e.emissiveTexture,e.emissiveTextureTransform)),null!=e.emissiveColor){const t=i(e.emissiveColor);s.emissiveFactor=[t[0],t[1],t[2]]}null!=e.occlusionTexture&&(s.occlusionTexture=this._createTextureInfo(e.occlusionTexture,e.occlusionTextureTransform)),null!=e.metallicRoughnessTexture&&(s.pbrMetallicRoughness.metallicRoughnessTexture=this._createTextureInfo(e.metallicRoughnessTexture,e.metallicRoughnessTextureTransform)),s.pbrMetallicRoughness.metallicFactor=e.metallic,s.pbrMetallicRoughness.roughnessFactor=e.roughness}else s.pbrMetallicRoughness.metallicFactor=1,s.pbrMetallicRoughness.roughnessFactor=1,L().warnOnce("Meshes exported to GLTF without MeshMaterialMetallicRoughness material will appear different when imported back.");const a=this.gltf.materials.length;return this.gltf.materials.push(s),this._materialMap.push(e),a}_createTextureInfo(e,t){const s={index:this._addTexture(e)};return t?(s.extensions||(s.extensions={}),s.extensions.KHR_texture_transform={scale:t.scale,offset:t.offset,rotation:r(t.rotation)},s):s}_addTexture(e){const t=this.gltf.textures??[];return this.gltf.textures=t,s(this._textureMap,e,(()=>{const s={sampler:this._addSampler(e),source:this._addImage(e)},r=t.length;return t.push(s),r}))}_addImage(e){const t=this._imageMap.get(e);if(null!=t)return t;this.gltf.images||(this.gltf.images=[]);const s={};if(e.url)s.uri=e.url;else{const t=e.data;s.extras=t;for(let e=0;e<this.gltf.images.length;++e)if(t===this.gltf.images[e].extras)return e;const r=this.gltf.extras;switch(r.options.imageOutputType){case b.GLB:{const e=r.binChunkBuffer.addBufferView(B.UNSIGNED_BYTE,E.SCALAR);if(N(t))null!=t.data&&e.writeOutToBuffer(t.data,0);else{const r=w(t).then((({data:e,type:t})=>(s.mimeType=t,e)));e.writeAsync(r).then((()=>{e.finalize()}))}s.bufferView=e.index;break}case b.DataURI:if(N(t)){L().warnOnce("Image export for basis compressed textures not available.");break}s.uri=I(t);break;default:if(N(t)){L().warnOnce("Image export for basis compressed textures not available.");break}r.promises.push(w(t).then((({data:e,type:t})=>{s.uri=e,s.mimeType=t})))}}const r=this.gltf.images.length;return this.gltf.images.push(s),this._imageMap.set(e,r),r}_addSampler(e){this.gltf.samplers||(this.gltf.samplers=[]);let t=C.REPEAT,s=C.REPEAT;if("string"==typeof e.wrap)switch(e.wrap){case"clamp":t=C.CLAMP_TO_EDGE,s=C.CLAMP_TO_EDGE;break;case"mirror":t=C.MIRRORED_REPEAT,s=C.MIRRORED_REPEAT}else{switch(e.wrap.vertical){case"clamp":s=C.CLAMP_TO_EDGE;break;case"mirror":s=C.MIRRORED_REPEAT}switch(e.wrap.horizontal){case"clamp":t=C.CLAMP_TO_EDGE;break;case"mirror":t=C.MIRRORED_REPEAT}}const r={wrapS:t,wrapT:s};for(let a=0;a<this.gltf.samplers.length;++a)if(JSON.stringify(r)===JSON.stringify(this.gltf.samplers[a]))return a;const i=this.gltf.samplers.length;return this.gltf.samplers.push(r),i}_addAccessor(e,t){this.gltf.accessors||(this.gltf.accessors=[]);const s={bufferView:e,byteOffset:t.byteOffset,componentType:t.componentType,count:t.count,type:t.type,min:t.min,max:t.max,name:t.name};t.normalized&&(s.normalized=!0);const r=this.gltf.accessors.length;return this.gltf.accessors.push(s),r}_addMeshVertexIndexed(e,t,s,r,i,a,o,n){const l=new Map;for(const c of t){e.startAccessor("INDICES");for(let s=0;s<c.faces.length;++s)e.push(c.faces[s]);const t=e.endAccessor(),h={attributes:{POSITION:r},indices:this._addAccessor(e.index,t),material:this._addMaterial(c.material)};i&&"flat"!==c.shading&&(h.attributes.NORMAL=i),a&&(h.attributes.TEXCOORD_0=a),o&&"flat"!==c.shading&&(h.attributes.TANGENT=o),n&&(h.attributes.COLOR_0=n);const f=l.get(c.name);if(f)f.primitives.push(h);else{const e={name:c.name,primitives:[h]};l.set(c.name,e),s.push(e)}}}_addMeshVertexNonIndexed(e,t,s,r,i,a,o){const n={primitives:[]};t.push(n);const l={attributes:{POSITION:s}};r&&(l.attributes.NORMAL=r),i&&(l.attributes.TEXCOORD_0=i),a&&(l.attributes.TANGENT=a),o&&(l.attributes.COLOR_0=o),e&&(l.material=this._addMaterial(e[0].material)),n.primitives.push(l)}}const v=n();export{S as GLTF};
