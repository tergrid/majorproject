/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import e from"../../request.js";import"../../core/has.js";import{normalizeCentralMeridian as a}from"../../geometry/support/normalizeUtils.js";import r from"../../layers/support/Field.js";import t from"../../layers/support/MapImage.js";import{parseUrl as o,encode as u}from"../utils.js";import l from"../support/DataFile.js";import s from"../support/FeatureSet.js";import n from"../support/LinearUnit.js";import i from"../support/ParameterValue.js";import c from"../support/RasterData.js";async function m(r,t,u,l,s){const n={},i={},c=[];return p(l,c,n),a(c).then((a=>{const{outSpatialReference:c,processExtent:m,processSpatialReference:p,returnColumnName:f,returnFeatureCollection:G,returnM:v,returnZ:S}=u,{path:N}=o(r);for(const e in n){const[r,t]=n[e];i[e]=a.slice(r,t)}const b=c?c.wkid||c:null,y=p?p.wkid||p:null,D="execute"===t?{returnColumnName:f||void 0,returnFeatureCollection:G||void 0,returnM:v||void 0,returnZ:S||void 0}:null,J=P({...m?{context:{extent:m,outSR:b,processSR:y}}:{"env:outSR":b,"env:processSR":y},...l,...D,f:"json"},null,i),M={...s,query:J};return e(`${N}/${t}`,M)}))}function p(e,a,r){for(const t in e){const o=e[t];if(o&&"object"==typeof o&&o instanceof s){const{features:e}=o;r[t]=[a.length,a.length+e.length],e.forEach((e=>{a.push(e.geometry)}))}}}function f(e){const a=e.dataType,o=i.fromJSON(e);switch(a){case"GPBoolean":case"GPDouble":case"GPLong":case"GPString":case"GPMultiValue:GPBoolean":case"GPMultiValue:GPDouble":case"GPMultiValue:GPLong":case"GPMultiValue:GPString":return o;case"GPDate":o.value=new Date(o.value);break;case"GPDataFile":o.value=l.fromJSON(o.value);break;case"GPLinearUnit":o.value=n.fromJSON(o.value);break;case"GPFeatureRecordSetLayer":case"GPRecordSet":{const a=e.value.url;o.value=a?l.fromJSON(o.value):s.fromJSON(o.value);break}case"GPRasterData":case"GPRasterDataLayer":{const a=e.value.mapImage;o.value=a?t.fromJSON(a):c.fromJSON(o.value);break}case"Field":o.value=r.fromJSON(o.value);break;case"GPValueTable":break;case"GPMultiValue:GPDate":o.value=o.value.map((e=>new Date(e)));break;case"GPMultiValue:GPDataFile":o.value=o.value.map((e=>l.fromJSON(e)));break;case"GPMultiValue:GPLinearUnit":o.value=o.value.map((e=>n.fromJSON(e)));break;case"GPMultiValue:GPFeatureRecordSetLayer":case"GPMultiValue:GPRecordSet":o.value=o.value.map((e=>s.fromJSON(e)));break;case"GPMultiValue:GPRasterData":case"GPMultiValue:GPRasterDataLayer":o.value=o.value.map((e=>e?t.fromJSON(e):c.fromJSON(o.value)));break;case"GPMultiValue:Field":o.value=o.value.map((e=>r.fromJSON(e)))}return o}function P(e,a,r){for(const t in e){const a=e[t];Array.isArray(a)?e[t]=JSON.stringify(a.map((e=>P({item:e},!0).item))):a instanceof Date&&(e[t]=a.getTime())}return u(e,a,r)}export{p as collectGeometries,m as constructRequest,f as decode,P as gpEncode};
