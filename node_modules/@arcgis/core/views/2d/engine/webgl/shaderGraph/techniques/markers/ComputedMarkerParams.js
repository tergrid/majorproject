/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import{pt2px as t}from"../../../../../../../core/screenUtils.js";import{Alignment as e}from"../../../../../../../symbols/cim/enums.js";import{applyParentTransform as i}from"../../../../../../../symbols/cim/utils.js";import{spritePadding as o,sdfTextureSize as s}from"../../../definitions.js";class h{static from(t){return"width"in t?this.fromSimpleMeshParams(t):this.fromComplexMeshParams(t)}static fromSimpleMeshParams(e){const i=new h(e.sprite,e.color,e.outlineColor,e.minPixelBuffer,e.placement,e.scaleInfo,e.effects),{type:o,width:s,height:r,angle:n,alignment:a,outlineSize:c,referenceSize:l,sprite:m,overrideOutlineColor:f}=e;i.rawWidth=t(s),i.rawHeight=t(r),i.angle=n,i.alignment=a,i.outlineSize=t(c),i.referenceSize=t(l),i.overrideOutlineColor=f,i.offsetX=t(e.offsetX),i.offsetY=t(e.offsetY),"simple"!==o||m.sdf||(i.rawWidth=m.width,i.rawHeight=m.height);const d=2;return i.sizeRatio=m.sdf?d:1,i._computeSize(e,!1),i}static fromComplexMeshParams(e){const o=new h(e.sprite,e.color,e.outlineColor,e.minPixelBuffer,e.placement,e.scaleInfo,e.effects);let{alignment:s,transforms:r,size:n,scaleX:a,anchorX:c,anchorY:l,angle:m,colorLocked:f,frameHeight:d,widthRatio:u,offsetX:p,offsetY:g,outlineSize:x,referenceSize:z,scaleFactor:w,sizeRatio:S,isAbsoluteAnchorPoint:X,rotateClockwise:Y,scaleSymbolsProportionally:H,sprite:C}=e;if(r&&r.infos.length>0){const t=i(n,m,Y,p,g,r);n=t.size,m=t.rotation,p=t.offsetX,g=t.offsetY,Y=!1}w&&(n*=w,p*=w,g*=w);const M=a*(C.width/C.height);o.alignment=s,o.rawHeight=t(n),o.rawWidth=o.rawHeight*M,o.referenceSize=t(z),o.sizeRatio=S,o.angle=m,o.rotateClockwise=Y,o.anchorX=c,o.anchorY=l,o.offsetX=t(p),o.offsetY=t(g),X&&n&&(C.sdf?o.anchorX=c/(n*u):o.anchorX=c/(n*M),o.anchorY=l/n);const W=H&&d?n/d:1;return o.outlineSize=0===x||isNaN(x)?0:t(x)*W,o.scaleSymbolsProportionally=H,o.colorLocked=f,o._computeSize(e,!0),o}constructor(t,i,o,s,h,r,n){this.sprite=t,this.color=i,this.outlineColor=o,this.minPixelBuffer=s,this.placement=h,this.scaleInfo=r,this.effects=n,this.rawWidth=0,this.rawHeight=0,this.angle=0,this.outlineSize=0,this.referenceSize=0,this.sizeRatio=1,this.alignment=e.SCREEN,this.scaleSymbolsProportionally=!1,this.overrideOutlineColor=!1,this.colorLocked=!1,this.anchorX=0,this.anchorY=0,this.computedWidth=0,this.computedHeight=0,this.texXmin=0,this.texYmin=0,this.texXmax=0,this.texYmax=0,this.offsetX=0,this.offsetY=0,this.rotateClockwise=!0}get boundsInfo(){return{size:Math.max(this.computedHeight,this.computedWidth),offsetX:this.offsetX,offsetY:this.offsetY}}_computeSize(t,e){const{sprite:i,hasSizeVV:h}=t,r=!!i.sdf,{rawWidth:n,rawHeight:a,sizeRatio:c,outlineSize:l}=this,m=n*c,f=a*c;if(r&&!h){const t=e&&n>a?m:n,i=a,o=l+2*1;this.computedWidth=Math.min(t+o,m),this.computedHeight=Math.min(i+o,f)}else this.computedWidth=m,this.computedHeight=f;const d=r?s/Math.max(m,f):1,u=.5*(m-this.computedWidth)*d,p=.5*(f-this.computedHeight)*d,g=i.rect.x+o+u,x=i.rect.y+o+p,z=g+i.width-2*u,w=x+i.height-2*p;this.texXmin=Math.floor(g),this.texYmin=Math.floor(x),this.texXmax=Math.ceil(z),this.texYmax=Math.ceil(w),this.computedWidth*=(this.texXmax-this.texXmin)/(z-g),this.computedHeight*=(this.texYmax-this.texYmin)/(w-x),this.anchorX*=m/this.computedWidth,this.anchorY*=f/this.computedHeight}}export{h as ComputedMarkerParams};
