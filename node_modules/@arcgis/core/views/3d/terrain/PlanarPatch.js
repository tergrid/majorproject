/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import{fromValues as e,create as t}from"../../../core/libs/gl-matrix-2/factories/vec3f64.js";import r from"../../../geometry/SpatialReference.js";import{projectVectorToVector as i}from"../../../geometry/projection/projectVectorToVector.js";import{wrap as a}from"../../../geometry/support/aaBoundingBox.js";import{create as o}from"../../../geometry/support/aaBoundingRect.js";import{isPlateCarree as s}from"../../../geometry/support/spatialReferenceUtils.js";import{TileFrustumVisibility as n}from"./ITile.js";import{createPlanarGlobePatch as l,updateCornersPlanar as c,updateEdgesAndCornersPlanar as h,updateEdgeElevationsAndResolutionsPlanar as d}from"./PatchGeometryFactory.js";import{Tile as u,CenterPosition as m}from"./Tile.js";import{intersectAabbInvDirBefore as p}from"../webgl-engine/materials/internal/MaterialUtil.js";class S extends u{constructor(e,t,r,i,a){super(),this._horizontalScaleFactor=1,this._extentInRenderSR=o(),this._baseUsedMemory=900,this.init(e,t,r,i,a)}init(t,a,o,n,l){super.init(t,a,o,n,l);const c=l.view.renderSpatialReference,h=l.spatialReference,d=null!=c&&s(c)&&null!=h&&h.isGeographic?this.ellipsoid.radius*Math.PI/180:1;this._horizontalScaleFactor=d;const{isWebMercatorOnPlateCarree:u}=l,m=this._extentInRenderSR,p=this.extent;if(u){const t=e(p[0],p[1],0);i(t,r.WebMercator,t,r.PlateCarree);const a=e(p[2],p[3],0);i(a,r.WebMercator,a,r.PlateCarree),m[0]=t[0],m[1]=t[1],m[2]=a[0],m[3]=a[1]}else for(let e=0;e<4;++e)m[e]=p[e]*d;this.centerAtSeaLevel[0]=.5*(m[0]+m[2]),this.centerAtSeaLevel[1]=.5*(m[1]+m[3]),this.centerAtSeaLevel[2]=0,this._edgeLen=Math.max(m[2]-m[0],m[3]-m[1]),this._edgeLen2=this._edgeLen*this._edgeLen,this.updateRadiusAndCenter()}updateRadiusAndCenter(){this._updateCenter();const e=this._extentInRenderSR,t=.5*(e[2]-e[0]),r=.5*(e[3]-e[1]),i=Math.sqrt(t*t+r*r),a=.5*(this.elevationBoundsMax-this.elevationBoundsMin),o=Math.max(i,a);this._center[m.MIDDLE][3]=o}_calculateFrustumVisibilityStatus(e){const t=this._aabb(),r=t[0],i=t[1],a=t[2],o=t[3],s=t[4],l=t[5];let c=!0;for(let h=0;h<6;h++){const t=e[h],d=t[0],u=t[1],m=t[2],p=t[3];if(d*(d>0?r:o)+u*(u>0?i:s)+m*(m>0?a:l)+p>=0)return n.OUTSIDE;c=c&&d*(d<0?r:o)+u*(u<0?i:s)+m*(m<0?a:l)+p<=0}return c?n.INSIDE:n.INTERSECTS}_aabb(){const e=this._extentInRenderSR;return a(e[0],e[1],this.elevationBoundsMin,e[2],e[3],this.elevationBoundsMax)}intersectsRay(e,t,r,i){return _[0]=1/t[0],_[1]=1/t[1],_[2]=1/t[2],p(this._aabb(),e,_,r,i)}createGeometry(){l(this.renderData,this._horizontalScaleFactor),this.setMemoryDirty()}getDefaultVerticesPerSide(){return this.level<9?3:2}updateCornerElevations(){c(this.renderData,this._horizontalScaleFactor)}updateEdgeElevations(){h(this.renderData,this._horizontalScaleFactor)}updateEdgeElevationsAndResolutions(){d(this.renderData,this._horizontalScaleFactor)}get horizontalScale(){return this._horizontalScaleFactor}}const _=t();export{S as PlanarPatch};
