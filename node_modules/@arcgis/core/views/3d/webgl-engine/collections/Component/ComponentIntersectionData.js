/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import{clamp as t}from"../../../../../core/mathUtils.js";import{create as e}from"../../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{fromValues as i}from"../../../../../geometry/support/aaBoundingBox.js";import{computeNormal as n}from"../../materials/internal/MaterialUtil.js";const s=200,r=40,o=.8,a=10,c=1e-6;function h(t,e,i){const n=e,s=i;let r=0,o=1/0;for(let a=0;a<3;++a){{const e=t[a];if(n[a]<e){if(s[a]<=c)return!1;const t=(e-n[a])/s[a];r=Math.max(r,t)}else if(s[a]<=-c){const t=(e-n[a])/s[a];o=Math.min(o,t)}if(r>o)return!1}{const e=t[a+3];if(n[a]>e){if(s[a]>=-c)return!1;const t=(e-n[a])/s[a];r=Math.max(r,t)}else if(s[a]>=c){const t=(e-n[a])/s[a];o=Math.min(o,t)}if(r>o)return!1}}return!0}class f{constructor(t,e,i,n,s){this.aabb=t,this.axis=e,this.d=i,this.midStartIndex=n,this.rightStartIndex=s}}class l{constructor(i,n,s,c){this.globalTriangleVertexIndices=i,this.firstTriangleIndex=n,this.positions=c,this._rayDirection=e(),this.bspNodeTree=new Array;const h=s-n,l=h<=p?new Uint16Array(h):new Uint32Array(h);this.indices=l;for(let t=0;t<h;++t)l[t]=t;{const e=N(i,n,s,c.data,c.stride),d=t(Math.log2(h/r),2,a),u=(t,i,n)=>{const s=x(l,e,t,i),a=i-t;if(a<=r){const e=new f(s,void 0,0,t,i);return this.bspNodeTree.push(e),e}const{axis:c,midValue:h}=y(s),m=g(l,e,t,i,c,h),N=(t,e)=>{if(n>d)return;const i=e-t;return i<r||i>=o*a?void 0:u(t,e,n+1)},b=new f(s,c,h,m.next,m.mid);return this.bspNodeTree.push(b),b.leftNode=N(t,m.next),b.rightNode=N(m.mid,i),b};u(0,h,0),this.triangleVertexIndices=b(l,i,n,s)}}intersectRayTriangleRange(t,e){if(t>=e)return;const i=this.triangleVertexIndices,s=this.positions.data,r=this.positions.stride,o=this._rayOrigin,a=o[0],c=o[1],h=o[2],f=this._rayDirection,u=f[0],m=f[1],g=f[2];for(let l=t,x=3*t;l<e;++l){const t=i[x]*r,e=s[t],o=s[t+1],f=s[t+2],y=i[x+1]*r,N=s[y],b=s[y+1],p=s[y+2],I=i[x+2]*r;x+=3;const T=N-e,M=b-o,R=p-f,S=s[I]-e,_=s[I+1]-o,w=s[I+2]-f,U=m*w-_*g,V=g*S-w*u,A=u*_-S*m,B=T*U+M*V+R*A;if(Math.abs(B)<=Number.EPSILON)continue;const v=a-e,P=c-o,j=h-f,D=v*U+P*V+j*A;if(B>0){if(D<0||D>B)continue}else if(D>0||D<B)continue;const F=P*R-M*j,O=j*T-R*v,L=v*M-T*P,k=u*F+m*O+g*L;if(B>0){if(k<0||D+k>B)continue}else if(k>0||D+k<B)continue;const E=(S*F+_*O+w*L)/B;if(E>=0){const t=this.indices[l]+this.firstTriangleIndex,e=n(T,M,R,S,_,w,d);this._callback(E,e,t,!1)}}l.numFacesTested+=e-t}intersectRay(t,e,i){l.numFacesTested=0;const n=t,s=e,r=s[0]-n[0],o=s[1]-n[1],a=s[2]-n[2];if(r*r+o*o+a*a<c)return;this._rayOrigin=n;const h=this._rayDirection;h[0]=r,h[1]=o,h[2]=a;const f=this.triangleVertexIndices.length/3;this._callback=i;const d=this.bspNodeTree[0];this.intersectRayBSP(d,0,f)}intersectRayBSP(t,e,i){const n=this._rayOrigin,s=this._rayDirection;if(!h(t.aabb,n,s))return;const r=t.axis,o=t.d;if(n[r]<o||s[r]<0){const i=e,n=t.midStartIndex;if(i<n){const e=t.leftNode;void 0!==e?this.intersectRayBSP(e,i,n):this.intersectRayTriangleRange(i,n)}}if(this.intersectRayTriangleRange(t.midStartIndex,t.rightStartIndex),n[r]>o||s[r]>0){const e=t.rightStartIndex,n=i;if(e<n){const i=t.rightNode;void 0!==i?this.intersectRayBSP(i,e,n):this.intersectRayTriangleRange(e,n)}}}get estimatedMemoryUsage(){return this.triangleVertexIndices.byteLength+this.indices.byteLength}}l.numFacesTested=0;const d=e(),u=[1/0,1/0,1/0],m=[-1/0,-1/0,-1/0];function g(t,e,i,n,s,r){let o=i,a=n;for(;o<a;){const i=t[o];e[6*i+s+3]<=r?++o:(--a,t[o]=t[a],t[a]=i)}let c=o;for(a=n;c<a;){const i=t[a-1];e[6*i+s]>=r?--a:(t[a-1]=t[c],t[c]=i,++c)}return{next:o,mid:c}}function x(t,e,n,s){if(s<=n)return i(NaN,NaN,NaN,NaN,NaN,NaN);{const i=6*t[n];for(let t=0;t<3;++t)u[t]=e[i+0+t],m[t]=e[i+3+t]}for(let i=n+1;i<s;++i){const n=6*t[i];for(let t=0;t<3;++t)u[t]=Math.min(u[t],e[n+0+t]),m[t]=Math.max(m[t],e[n+3+t])}return i(u[0],u[1],u[2],m[0],m[1],m[2])}function y(t){const e=t[3]-t[0],i=t[4]-t[1],n=t[5]-t[2],s=e>i?e>n?0:i>n?1:2:i>n?1:n>e?2:0;return{axis:s,midValue:(t[s]+t[s+3])/2}}function N(t,e,i,n,s){const r=i-e,o=new Float32Array(6*r);for(let a=0;a<r;++a){const i=3*(a+e),r=t[i]*s,c=t[i+1]*s,h=t[i+2]*s;for(let t=0;t<3;++t){const e=n[r+t],i=n[c+t],s=n[h+t];o[6*a+t]=Math.min(e,i,s),o[6*a+3+t]=Math.max(e,i,s)}}return o}function b(t,e,i,n){const s=n-i;let r=0;for(let a=i;a<n;++a)for(let t=0;t<3;++t)r=Math.max(e[3*a+t],r);const o=r<=p?new Uint16Array(3*s):new Uint32Array(3*s);for(let a=0;a<s;++a){const n=3*(t[a]+i);for(let t=0;t<3;++t){const i=e[n+t];o[3*a+t]=i}}return o}const p=65535;export{l as ComponentIntersectionData,s as componentMinimalSizeForIntersectionData};
