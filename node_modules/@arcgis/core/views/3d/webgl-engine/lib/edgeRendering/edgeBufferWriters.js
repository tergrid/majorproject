/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import t from"../../../../../core/RandomLCG.js";import{g as e,n as o}from"../../../../../chunks/vec32.js";import{create as r}from"../../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{glLayout as n}from"../../../support/buffer/glUtil.js";import{compressNormal as i}from"../Normals.js";import{RegularEdgeInstancesLayout as s,SilhouetteEdgeInstancesLayout as a}from"./bufferLayouts.js";class c{updateSettings(t){this.settings=t,this._edgeHashFunction=t.reducedPrecision?l:p}write(t,e,o){const r=this._edgeHashFunction(o);N.seed=r;const n=N.getIntRange(0,255),i=N.getIntRange(0,this.settings.variants-1),s=.7,a=N.getFloat(),c=255*(.5*h(-(1-Math.min(a/s,1))+Math.max(0,a-s)/(1-s),1.2)+.5);t.position0.setVec(e,o.position0),t.position1.setVec(e,o.position1),t.componentIndex.set(e,o.componentIndex),t.variantOffset.set(e,n),t.variantStroke.set(e,i),t.variantExtension.set(e,c)}trim(t,e){return t.slice(0,e)}}const m=new Float32Array(6),f=new Uint32Array(m.buffer),u=new Uint32Array(1);function p(t){const e=m;e[0]=t.position0[0],e[1]=t.position0[1],e[2]=t.position0[2],e[3]=t.position1[0],e[4]=t.position1[1],e[5]=t.position1[2],u[0]=5381;for(let o=0;o<f.length;o++)u[0]=31*u[0]+f[o];return u[0]}function l(t){const e=m;e[0]=g(t.position0[0]),e[1]=g(t.position0[1]),e[2]=g(t.position0[2]),e[3]=g(t.position1[0]),e[4]=g(t.position1[1]),e[5]=g(t.position1[2]),u[0]=5381;for(let o=0;o<f.length;o++)u[0]=31*u[0]+f[o];return u[0]}const d=1e4;function g(t){return Math.round(t*d)/d}function h(t,e){const o=t<0?-1:1;return Math.abs(t)**e*o}class y{constructor(){this._commonWriter=new c}updateSettings(t){this._commonWriter.updateSettings(t)}allocate(t){return s.createBuffer(t)}write(t,r,n){this._commonWriter.write(t,r,n),e(_,n.faceNormal0,n.faceNormal1),o(_,_);const{typedBuffer:s,typedBufferStride:a}=t.normalCompressed;i(s,r,_[0],_[1],_[2],a)}trim(t,e){return this._commonWriter.trim(t,e)}}y.Layout=s,y.glLayout=n(s,1);class w{constructor(){this._commonWriter=new c}updateSettings(t){this._commonWriter.updateSettings(t)}allocate(t){return a.createBuffer(t)}write(t,e,o){this._commonWriter.write(t,e,o);{const{typedBuffer:r,typedBufferStride:n}=t.normalCompressed;i(r,e,o.faceNormal0[0],o.faceNormal0[1],o.faceNormal0[2],n)}{const{typedBuffer:r,typedBufferStride:n}=t.normal2Compressed;i(r,e,o.faceNormal1[0],o.faceNormal1[1],o.faceNormal1[2],n)}}trim(t,e){return this._commonWriter.trim(t,e)}}w.Layout=a,w.glLayout=n(a,1);const _=r(),N=new t;export{c as CommonBufferWriter,y as RegularEdgeBufferWriter,w as SilhouetteEdgeBufferWriter};
