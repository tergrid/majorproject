/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import{squaredDistance as e}from"../../../core/libs/gl-matrix-2/math/vec2.js";import{create as t}from"../../../core/libs/gl-matrix-2/factories/vec2f64.js";import{absoluteHeightElevationInfo as r}from"../../../support/elevationInfoUtils.js";import{fromAnyMapPoint as i,asVec2 as s,fromValues as o}from"../sketch/normalizedPoint.js";import{defaults as n}from"./Settings.js";import{SnappingAlgorithm as l}from"./SnappingAlgorithm.js";import{editEdgeToSnappingEdge as a,squaredScreenDistance as c}from"./snappingUtils.js";import{ParallelLineSnappingCandidate as h}from"./candidates/ParallelLineSnappingCandidate.js";import{vectorToScreenPoint as d}from"../support/viewUtils.js";import{projectPointToLine as p}from"../../support/geometry2dUtils.js";class g extends l{snapNewVertex(e,t){const s=t.editGeometryOperations.data.components[0],o=s.edges.length,n=s.vertices.length,l=[];if(o<2)return l;const{view:c}=this,h=d(e,t.spatialReference,r,c),p=i(s.vertices[n-1].pos,c,t),g=i(s.vertices[0].pos,c,t),f=s.edges[o-1];let m=f;do{if(this.edgeExceedsShortLineThreshold(m,t)){const r=a(m,c,t);this._checkEdgeForParallelLines(r,p,e,h,t,l),this._checkEdgeForParallelLines(r,g,e,h,t,l)}m=m.leftVertex.leftEdge}while(m&&m!==f);return l}snapExistingVertex(e,t){const s=[],o=t.vertexHandle,n=o.component;if(n.edges.length<3)return s;const{view:l}=this,c=d(e,t.spatialReference,r,l),h=o.leftEdge,p=o.rightEdge,g=n.vertices[0],f=i(g.pos,l,t),m=n.vertices.length,u=n.vertices[m-1],v=i(u.pos,l,t),x=n.edges[0];let E=x;do{if(E!==h&&E!==p&&this.edgeExceedsShortLineThreshold(E,t)){const r=a(E,l,t);h&&this._checkEdgeForParallelLines(r,i(h.leftVertex.pos,l,t),e,c,t,s),p&&this._checkEdgeForParallelLines(r,i(p.rightVertex.pos,l,t),e,c,t,s),o===g?this._checkEdgeForParallelLines(r,v,e,c,t,s):o===u&&this._checkEdgeForParallelLines(r,f,e,c,t,s)}E=E.rightVertex.rightEdge}while(E&&E!==x);return s}_checkEdgeForParallelLines(t,i,l,a,g,m){const u=t.left,v=t.right;if(p(f,s(i),s(u),s(v)),e(f,s(i))<n.parallelLineThreshold)return;p(f,s(l),s(u),s(v),s(i));const{spatialReference:x,pointer:E}=g,L=o(f[0],f[1],l[2]);if(c(a,d(L,x,r,this.view))<this.squaredProximityThreshold(E)){if(this.isVertical(L,i,g)||this.isVertical(u,v,g))return;if(this._parallelToPreviousCandidate(t,m))return;m.push(new h({referenceLine:t,lineStart:i,targetPoint:L,isDraped:"on-the-ground"===g.elevationInfo?.mode}))}}_parallelToPreviousCandidate(t,r){const i=t.left,o=t.right;for(const l of r)if(p(f,s(o),s(l.constraint.start),s(l.constraint.end),s(i)),e(f,s(o))<n.parallelLineThreshold)return l.addReferenceLine(t),!0;return!1}}const f=t();export{g as ParallelLineSnapper};
