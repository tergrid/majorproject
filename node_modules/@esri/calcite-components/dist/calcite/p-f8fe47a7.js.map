{"version":3,"names":["getIconScale","componentScale","async","componentOnReady","el","isStencilEl","Promise","resolve","requestAnimationFrame","componentFocusable"],"sources":["src/utils/component.ts"],"sourcesContent":["import { Build, forceUpdate as stencilForceUpdate } from \"@stencil/core\";\nimport { HTMLStencilElement } from \"@stencil/core/internal\";\nimport { Scale } from \"../components/interfaces\";\n\nexport function getIconScale(componentScale: Scale): Extract<Scale, \"s\" | \"m\"> {\n  return componentScale === \"l\" ? \"m\" : \"s\";\n}\n\n/**\n * This util helps us wait for a component to be ready for both lazy-loading (`dist` output) and non-lazy-loading (`components` output) components.\n *\n * Based on https://github.com/ionic-team/ionic-framework/blob/1a8bd6d/core/src/utils/helpers.ts#L60C1-L79C3\n *\n * @param el - the host element to wait for\n */\nexport async function componentOnReady(el: HTMLElement): Promise<void> {\n  await (isStencilEl(el)\n    ? el.componentOnReady()\n    : new Promise<void>((resolve) => requestAnimationFrame(() => resolve())));\n}\n\nfunction isStencilEl(el: HTMLElement): el is HTMLStencilElement {\n  return typeof (el as HTMLStencilElement).componentOnReady === \"function\";\n}\n\n/**\n * Exported for testing purposes only.\n *\n * @internal\n */\nexport const forceUpdate = Build.isTesting\n  ? stencilForceUpdate\n  : () => {\n      /* noop */\n    };\n\n/**\n * This helper util can be used to ensuring the component is loaded and rendered by the browser (The \"componentDidLoad\" Stencil lifecycle method has been called and any internal elements are focusable).\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first and then an internal element be focused.\n *\n * ```\n * async setFocus(): Promise<void> {\n *   await componentFocusable(this);\n *   this.internalElement?.focus();\n * }\n * ```\n *\n * @param el the component's host element\n * @returns Promise<void>\n */\nexport async function componentFocusable(el: HTMLElement): Promise<void> {\n  await componentOnReady(el);\n\n  if (!Build.isBrowser && !Build.isTesting) {\n    return;\n  }\n\n  forceUpdate(el);\n  return new Promise((resolve) => requestAnimationFrame(() => resolve()));\n}\n"],"mappings":";;;;;iCAIgBA,EAAaC,GAC3B,OAAOA,IAAmB,IAAM,IAAM,GACxC,CASOC,eAAeC,EAAiBC,SAC9BC,EAAYD,GACfA,EAAGD,mBACH,IAAIG,SAAeC,GAAYC,uBAAsB,IAAMD,QACjE,CAEA,SAASF,EAAYD,GACnB,cAAeA,EAA0BD,mBAAqB,UAChE,CA4BOD,eAAeO,EAAmBL,SACjCD,EAAiBC,GAOvB,OAAO,IAAIE,SAASC,GAAYC,uBAAsB,IAAMD,OAC9D,Q"}