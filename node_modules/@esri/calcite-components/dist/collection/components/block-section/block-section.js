/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.9.0
 */
import { h, Host, } from "@stencil/core";
import { focusFirstTabbable, toAriaBoolean } from "../../utils/dom";
import { isActivationKey } from "../../utils/key";
import { connectLocalized, disconnectLocalized } from "../../utils/locale";
import { connectMessages, disconnectMessages, setUpMessages, updateMessages, } from "../../utils/t9n";
import { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from "../../utils/loadable";
import { CSS, ICONS, IDS } from "./resources";
/**
 * @slot - A slot for adding custom content.
 */
export class BlockSection {
    constructor() {
        // --------------------------------------------------------------------------
        //
        //  Private Methods
        //
        // --------------------------------------------------------------------------
        this.handleHeaderKeyDown = (event) => {
            if (isActivationKey(event.key)) {
                this.toggleSection();
                event.preventDefault();
                event.stopPropagation();
            }
        };
        this.toggleSection = () => {
            this.open = !this.open;
            this.calciteBlockSectionToggle.emit();
        };
        this.iconEnd = undefined;
        this.iconFlipRtl = undefined;
        this.iconStart = undefined;
        this.open = false;
        this.status = undefined;
        this.text = undefined;
        this.toggleDisplay = "button";
        this.messages = undefined;
        this.messageOverrides = undefined;
        this.effectiveLocale = undefined;
        this.defaultMessages = undefined;
    }
    onMessagesChange() {
        /* wired up by t9n util */
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Sets focus on the component's first tabbable element.
     *
     */
    async setFocus() {
        await componentFocusable(this);
        focusFirstTabbable(this.el);
    }
    effectiveLocaleChange() {
        updateMessages(this, this.effectiveLocale);
    }
    // --------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    // --------------------------------------------------------------------------
    connectedCallback() {
        connectLocalized(this);
        connectMessages(this);
    }
    async componentWillLoad() {
        await setUpMessages(this);
        setUpLoadableComponent(this);
    }
    componentDidLoad() {
        setComponentLoaded(this);
    }
    disconnectedCallback() {
        disconnectLocalized(this);
        disconnectMessages(this);
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    // --------------------------------------------------------------------------
    renderStatusIcon() {
        const { status } = this;
        const statusIcon = ICONS[status] ?? false;
        const statusIconClasses = {
            [CSS.statusIcon]: true,
            [CSS.valid]: status == "valid",
            [CSS.invalid]: status == "invalid",
        };
        return statusIcon ? (h("calcite-icon", { class: statusIconClasses, icon: statusIcon, scale: "s" })) : null;
    }
    renderIcon(icon) {
        const { iconFlipRtl } = this;
        if (icon === undefined) {
            return null;
        }
        const flipRtlStart = iconFlipRtl === "both" || iconFlipRtl === "start";
        const flipRtlEnd = iconFlipRtl === "both" || iconFlipRtl === "end";
        const isIconStart = icon === this.iconStart;
        /** Icon scale is not variable as the component does not have a scale property */
        return (h("calcite-icon", { class: isIconStart ? this.iconStart : this.iconEnd, flipRtl: isIconStart ? flipRtlStart : flipRtlEnd, icon: isIconStart ? this.iconStart : this.iconEnd, key: isIconStart ? CSS.iconStart : CSS.iconEnd, scale: "s" }));
    }
    render() {
        const { messages, open, text, toggleDisplay } = this;
        const arrowIcon = open ? ICONS.menuOpen : ICONS.menuClosed;
        const toggleLabel = open ? messages.collapse : messages.expand;
        const headerNode = toggleDisplay === "switch" ? (h("div", { class: {
                [CSS.toggleContainer]: true,
            } }, h("div", { "aria-controls": IDS.content, "aria-expanded": toAriaBoolean(open), class: {
                [CSS.toggle]: true,
                [CSS.toggleSwitch]: true,
            }, id: IDS.toggle, onClick: this.toggleSection, onKeyDown: this.handleHeaderKeyDown, role: "button", tabIndex: 0, title: toggleLabel }, this.renderIcon(this.iconStart), h("div", { class: CSS.toggleSwitchContent }, h("span", { class: CSS.toggleSwitchText }, text)), this.renderIcon(this.iconEnd), this.renderStatusIcon()), h("calcite-label", { class: CSS.label, layout: "inline", tabIndex: -1 }, h("calcite-switch", { checked: open, class: CSS.switch, label: toggleLabel, scale: "s" })))) : (h("div", { class: {
                [CSS.toggleContainer]: true,
            } }, h("button", { "aria-controls": IDS.content, "aria-expanded": toAriaBoolean(open), class: {
                [CSS.sectionHeader]: true,
                [CSS.toggle]: true,
            }, id: IDS.toggle, onClick: this.toggleSection }, this.renderIcon(this.iconStart), h("span", { class: CSS.sectionHeaderText }, text), this.renderIcon(this.iconEnd), this.renderStatusIcon(), h("calcite-icon", { class: CSS.chevronIcon, icon: arrowIcon, scale: "s" }))));
        return (h(Host, { key: '768a133e8082de210c0a740a5ab02117c96441a1' }, headerNode, h("section", { key: '43a1e364a397b7b62f90a8bae2eea361816cba76', "aria-labelledby": IDS.toggle, class: CSS.content, hidden: !open, id: IDS.content }, h("slot", { key: 'af10f99c85d67beb6d0f06d66dddef1b98aa774d' }))));
    }
    static get is() { return "calcite-block-section"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["block-section.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["block-section.css"]
        };
    }
    static get assetsDirs() { return ["assets"]; }
    static get properties() {
        return {
            "iconEnd": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies an icon to display at the end of the component."
                },
                "attribute": "icon-end",
                "reflect": true
            },
            "iconFlipRtl": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "FlipContext",
                    "resolved": "\"both\" | \"end\" | \"start\"",
                    "references": {
                        "FlipContext": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::FlipContext"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`)."
                },
                "attribute": "icon-flip-rtl",
                "reflect": true
            },
            "iconStart": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies an icon to display at the start of the component."
                },
                "attribute": "icon-start",
                "reflect": true
            },
            "open": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, expands the component and its contents."
                },
                "attribute": "open",
                "reflect": true,
                "defaultValue": "false"
            },
            "status": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Status",
                    "resolved": "\"idle\" | \"invalid\" | \"valid\"",
                    "references": {
                        "Status": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Status"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "deprecated",
                            "text": "Use `icon-start` instead."
                        }],
                    "text": "Displays a status-related indicator icon."
                },
                "attribute": "status",
                "reflect": true
            },
            "text": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The component header text."
                },
                "attribute": "text",
                "reflect": false
            },
            "toggleDisplay": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "BlockSectionToggleDisplay",
                    "resolved": "\"button\" | \"switch\"",
                    "references": {
                        "BlockSectionToggleDisplay": {
                            "location": "import",
                            "path": "./interfaces",
                            "id": "src/components/block-section/interfaces.ts::BlockSectionToggleDisplay"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies how the component's toggle is displayed, where:\n\n`\"button\"` sets the toggle to a selectable header, and\n\n`\"switch\"` sets the toggle to a switch."
                },
                "attribute": "toggle-display",
                "reflect": true,
                "defaultValue": "\"button\""
            },
            "messages": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "BlockSectionMessages",
                    "resolved": "{ collapse: string; expand: string; }",
                    "references": {
                        "BlockSectionMessages": {
                            "location": "import",
                            "path": "./assets/block-section/t9n",
                            "id": "src/components/block-section/assets/block-section/t9n/index.d.ts::BlockSectionMessages"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Made into a prop for testing purposes only"
                }
            },
            "messageOverrides": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "Partial<BlockSectionMessages>",
                    "resolved": "{ collapse?: string; expand?: string; }",
                    "references": {
                        "Partial": {
                            "location": "global",
                            "id": "global::Partial"
                        },
                        "BlockSectionMessages": {
                            "location": "import",
                            "path": "./assets/block-section/t9n",
                            "id": "src/components/block-section/assets/block-section/t9n/index.d.ts::BlockSectionMessages"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Use this property to override individual strings used by the component."
                }
            }
        };
    }
    static get states() {
        return {
            "effectiveLocale": {},
            "defaultMessages": {}
        };
    }
    static get events() {
        return [{
                "method": "calciteBlockSectionToggle",
                "name": "calciteBlockSectionToggle",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the header has been clicked."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "setFocus": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Sets focus on the component's first tabbable element.",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "messageOverrides",
                "methodName": "onMessagesChange"
            }, {
                "propName": "effectiveLocale",
                "methodName": "effectiveLocaleChange"
            }];
    }
}
//# sourceMappingURL=block-section.js.map
