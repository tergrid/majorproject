/**
 * Do not edit directly
 * Generated on Wed, 29 May 2024 06:41:17 GMT
 */
/**
 * Do not edit directly
 * Generated on Wed, 29 May 2024 06:41:17 GMT
 */
/**
 * Do not edit directly
 * Generated on Wed, 29 May 2024 06:41:17 GMT
 */
/**
 * Do not edit directly
 * Generated on Wed, 29 May 2024 06:41:17 GMT
 */
/**
 * Do not edit directly
 * Generated on Wed, 29 May 2024 06:41:15 GMT
 */
/* mixins & extensions */
/* helper to properly scale internal durations */
/**
* Currently only used in Checkbox.
*/
:host([disabled]) {
  cursor: default;
  -webkit-user-select: none;
          user-select: none;
  opacity: var(--calcite-opacity-disabled);
}

:host([disabled]) *,
:host([disabled]) ::slotted(*) {
  pointer-events: none;
}

/**
  * Local props
  * These properties are intended for internal component use only. It is not recommended that these properties be overwritten.
  * These should be made public and documented post-release of token work.
  *
  * --calcite-internal-carousel-item-background-color-active: Specifies the background color of the component's slide item while active.
  * --calcite-internal-carousel-item-background-color-hover: Specifies the background color of the component's slide item while hovered.
  * --calcite-internal-carousel-item-background-color-selected: Specifies the background color of the component's slide item when selected.
  * --calcite-internal-carousel-item-background-color: Specifies the background color of the component's slide item.
  * --calcite-internal-carousel-item-icon-color-hover: Specifies the icon color of the component's slide item while hovered.
  * --calcite-internal-carousel-item-icon-color-selected: Specifies the icon color of the component's slide item when selected.
  * --calcite-internal-carousel-item-icon-color: Specifies the icon color of the component's slide item.
  * --calcite-internal-carousel-control-color-hover: Specifies the icon color of the component's slide slide arrow and autoplay button while hovered.
  * --calcite-internal-carousel-control-color: Specifies the icon color of the component's slide arrow and autoplay button.
  * --calcite-internal-carousel-autoplay-progress-background-color: Specifies the background color of the component's progress when `autoplay`.
  * --calcite-internal-carousel-autoplay-progress-fill-color: Specifies the fill color of the component's progress when `autoplay`.
  *
*/
:host {
  display: flex;
  inline-size: 100%;
  --calcite-internal-internal-carousel-item-space: 1.5rem;
  --calcite-internal-internal-carousel-item-space-wide: 3.5rem;
  --calcite-internal-internal-carousel-item-background-color: var(
    --calcite-internal-carousel-item-background-color,
    var(--calcite-color-foreground-1)
  );
  --calcite-internal-internal-carousel-item-background-color-hover: var(
    --calcite-internal-carousel-item-background-color-hover,
    var(--calcite-color-foreground-2)
  );
  --calcite-internal-internal-carousel-item-background-color-active: var(
    --calcite-internal-carousel-item-background-color-active,
    var(--calcite-color-foreground-2)
  );
  --calcite-internal-internal-carousel-item-background-color-selected: var(
    --calcite-internal-carousel-item-background-color-selected,
    var(--calcite-color-foreground-1)
  );
  --calcite-internal-internal-carousel-item-icon-color-hover: var(
    --calcite-internal-carousel-item-icon-color-hover,
    var(--calcite-action-color-transparent-hover)
  );
  --calcite-internal-internal-carousel-item-icon-color: var(
    --calcite-internal-carousel-item-icon-color,
    var(--calcite-color-border-3)
  );
  --calcite-internal-internal-carousel-item-icon-color-selected: var(
    --calcite-internal-carousel-item-icon-color-selected,
    var(--calcite-color-brand)
  );
  --calcite-internal-internal-carousel-control-color-hover: var(
    --calcite-internal-carousel-control-color-hover,
    var(--calcite-internal-carousel-item-icon-color-hover)
  );
  --calcite-internal-internal-carousel-control-color: var(
    --calcite-internal-carousel-item-icon-color,
    var(--calcite-color-border-input)
  );
  --calcite-internal-internal-carousel-autoplay-progress-background-color: var(
    --calcite-internal-carousel-autoplay-progress-background-color,
    var(--calcite-color-border-3)
  );
  --calcite-internal-internal-carousel-autoplay-progress-fill-color: var(
    --calcite-internal-carousel-autoplay-progress-fill-color,
    var(--calcite-color-brand)
  );
}

.container {
  position: relative;
  display: flex;
  inline-size: 100%;
  flex-direction: column;
  overflow: hidden;
  font-size: var(--calcite-font-size--1);
  line-height: 1rem;
  color: var(--calcite-color-text-2);
  outline-color: transparent;
}
.container:focus {
  outline: 2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand));
  outline-offset: calc(
            -2px *
            calc(
              1 -
              2 * clamp(
                0,
                var(--calcite-offset-invert-focus),
                1
              )
            )
          );
}

.container--edged:not(.container--overlaid) {
  padding-inline: var(--calcite-internal-internal-carousel-item-space-wide);
  inline-size: calc(100% - var(--calcite-internal-internal-carousel-item-space-wide) * 2);
}

.item-container {
  display: flex;
  flex: 1 1 auto;
  align-items: flex-start;
  justify-content: center;
  overflow: auto;
  padding: 0.25rem;
  animation-name: none;
  animation-duration: var(--calcite-animation-timing);
}

.container--overlaid .item-container {
  padding: 0px;
}

.item-container--forward {
  animation-name: item-forward;
}

.item-container--backward {
  animation-name: item-backward;
}

calcite-carousel-item:not([selected]) {
  opacity: 0;
}

.pagination {
  margin: 0.75rem;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  inline-size: auto;
}

.pagination-items {
  display: flex;
  flex-direction: row;
  align-items: center;
}

.container--overlaid .pagination {
  position: absolute;
}

.pagination-item.page-next,
.pagination-item.page-previous {
  color: var(--calcite-internal-internal-carousel-control-color);
}
.pagination-item.page-next:hover,
.pagination-item.page-previous:hover {
  color: var(--calcite-internal-internal-carousel-control-color-hover);
}

.container--edged .page-next,
.container--edged .page-previous {
  block-size: 3rem;
  inline-size: 3rem;
  position: absolute;
  inset-block-start: 50%;
  transform: translateY(-50%);
}
.container--edged .page-next {
  inset-inline-end: 0;
}
.container--edged .page-previous {
  inset-inline-start: 0;
}

.container--overlaid .pagination {
  inset-block-start: unset;
  inset-block-end: 0;
  inset-inline: 0;
}

.pagination-item.autoplay-control {
  position: relative;
  color: var(--calcite-internal-internal-carousel-control-color);
  --calcite-color-brand: var(--calcite-internal-internal-carousel-autoplay-progress-fill-color);
  --calcite-color-border-3: var(--calcite-internal-internal-carousel-autoplay-progress-background-color);
}

.autoplay-control:focus .autoplay-progress {
  inset-block-end: 4px;
  inset-inline: 2px;
  inline-size: calc(100% - 4px);
}

.autoplay-progress {
  position: absolute;
  inset-block-end: 2px;
  inset-inline: 0;
  inline-size: 100%;
}

.pagination-item {
  margin: 0px;
  block-size: 2rem;
  inline-size: 2rem;
  cursor: pointer;
  align-items: center;
  border-style: none;
  background-color: transparent;
  outline-color: transparent;
  transition: background-color, block-size, border-color, box-shadow, color, inset-block-end, inset-block-start, inset-inline-end, inset-inline-start inset-size, opacity, outline-color, transform var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;
  -webkit-appearance: none;
  display: flex;
  align-content: center;
  justify-content: center;
  --calcite-color-foreground-1: var(--calcite-internal-internal-carousel-item-background-color);
  color: var(--calcite-internal-internal-carousel-item-icon-color);
}
.pagination-item:hover {
  background-color: var(--calcite-internal-internal-carousel-item-background-color-hover);
  color: var(--calcite-internal-internal-carousel-item-icon-color-hover);
}
.pagination-item:focus {
  background-color: var(--calcite-internal-internal-carousel-item-background-color-active);
  outline: 2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand));
  outline-offset: calc(
            -2px *
            calc(
              1 -
              2 * clamp(
                0,
                var(--calcite-offset-invert-focus),
                1
              )
            )
          );
}
.pagination-item:active {
  background-color: var(--calcite-internal-internal-carousel-item-background-color-active);
  color: var(--calcite-internal-internal-carousel-item-icon-color-hover);
}
.pagination-item calcite-icon {
  color: inherit;
  pointer-events: none;
}
.pagination-item.pagination-item--selected {
  --calcite-color-foreground-1: var(--calcite-internal-internal-carousel-item-background-color-selected);
  --calcite-color-foreground-3: var(--calcite-internal-internal-carousel-item-background-color-selected);
  color: var(--calcite-internal-internal-carousel-item-icon-color-selected);
}

.container--overlaid .pagination-item {
  background-color: var(--calcite-internal-internal-carousel-item-background-color);
}
.container--overlaid .pagination-item:hover {
  background-color: var(--calcite-internal-internal-carousel-item-background-color-hover);
}
.container--overlaid .pagination-item:focus {
  background-color: var(--calcite-internal-internal-carousel-item-background-color-active);
}
.container--overlaid .pagination-item:active {
  background-color: var(--calcite-internal-internal-carousel-item-background-color-active);
}

@keyframes item-forward {
  0% {
    transform: translate3d(100px, 0, 0);
  }
  100% {
    transform: translate3d(0, 0, 0);
  }
}
@keyframes item-backward {
  0% {
    transform: translate3d(-100px, 0, 0);
  }
  100% {
    transform: translate3d(0, 0, 0);
  }
}
:host([disabled]) ::slotted([calcite-hydrated][disabled]),
:host([disabled]) [calcite-hydrated][disabled] {
  /* prevent opacity stacking */
  opacity: 1;
}

.interaction-container {
  display: contents;
}

:host([hidden]) {
  display: none;
}

[hidden] {
  display: none;
}