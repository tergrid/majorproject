{"version":3,"file":"segmented-control-item.js","sourceRoot":"","sources":["../../../../src/components/segmented-control-item/segmented-control-item.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { slotChangeHasContent, toAriaBoolean } from \"../../utils/dom\";\nimport { Appearance, Layout, Scale } from \"../interfaces\";\nimport { CSS, SLOTS } from \"./resources\";\n\n@Component({\n  tag: \"calcite-segmented-control-item\",\n  styleUrl: \"segmented-control-item.scss\",\n  shadow: true,\n})\nexport class SegmentedControlItem {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** When `true`, the component is checked. */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by form module\n  @Prop({ reflect: true, mutable: true }) checked = false;\n\n  @Watch(\"checked\")\n  protected handleCheckedChange(): void {\n    this.calciteInternalSegmentedControlItemChange.emit();\n  }\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /** Specifies an icon to display at the start of the component. */\n  @Prop({ reflect: true }) iconStart: string;\n\n  /** Specifies an icon to display at the end of the component. */\n  @Prop({ reflect: true }) iconEnd: string;\n\n  /**\n   * The component's value.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by form module\n  @Prop({ mutable: true }) value: any | null;\n\n  /**\n   * Specifies the appearance style of the component inherited from parent `calcite-segmented-control`, defaults to `solid`.\n   *\n   * @internal\n   */\n  @Prop() appearance: Extract<\"outline\" | \"outline-fill\" | \"solid\", Appearance> = \"solid\";\n\n  /**\n   * Defines the layout of the component inherited from parent `calcite-segmented-control`, defaults to `horizontal`.\n   *\n   * @internal\n   */\n  @Prop() layout: Layout = \"horizontal\";\n\n  /**\n   * Specifies the size of the component inherited from the `calcite-segmented-control`, defaults to `m`.\n   *\n   * @internal\n   */\n  @Prop() scale: Scale = \"m\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  private renderIcon(icon: string, solo: boolean = false): VNode {\n    return icon ? (\n      <calcite-icon\n        class={{\n          [CSS.icon]: true,\n          [CSS.iconSolo]: solo,\n        }}\n        flipRtl={this.iconFlipRtl}\n        icon={icon}\n        scale=\"s\"\n      />\n    ) : null;\n  }\n\n  render(): VNode {\n    const { appearance, checked, layout, scale, value } = this;\n\n    return (\n      <Host aria-checked={toAriaBoolean(checked)} aria-label={value} role=\"radio\">\n        <label\n          class={{\n            [CSS.label]: true,\n            [CSS.labelScale(scale)]: true,\n            [CSS.labelHorizontal]: layout === \"horizontal\",\n            [CSS.labelOutline]: appearance === \"outline\",\n            [CSS.labelOutlineFill]: appearance === \"outline-fill\",\n          }}\n        >\n          {this.renderContent()}\n        </label>\n      </Host>\n    );\n  }\n\n  private renderContent(): VNode | VNode[] {\n    const { hasSlottedContent, iconEnd, iconStart } = this;\n    const effectiveIcon = iconStart || iconEnd;\n    const canRenderIconOnly = !hasSlottedContent && effectiveIcon;\n\n    if (canRenderIconOnly) {\n      return [this.renderIcon(effectiveIcon, true), <slot onSlotchange={this.handleSlotChange} />];\n    }\n\n    return [\n      this.renderIcon(iconStart),\n      <slot onSlotchange={this.handleSlotChange} />,\n      <slot name={SLOTS.input} />,\n      this.renderIcon(iconEnd),\n    ];\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private handleSlotChange = (event: Event): void => {\n    this.hasSlottedContent = slotChangeHasContent(event);\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteSegmentedControlItemElement;\n\n  @State() hasSlottedContent = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the item has been selected.\n   *\n   * @internal\n   */\n  @Event({ cancelable: false })\n  calciteInternalSegmentedControlItemChange: EventEmitter<void>;\n}\n"]}