/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.9.0
 */
import { h, } from "@stencil/core";
import { connectInteractive, disconnectInteractive, InteractiveContainer, updateHostInteraction, } from "../../utils/interactive";
import { slotChangeHasAssignedElement, toAriaBoolean } from "../../utils/dom";
import { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from "../../utils/loadable";
import { CSS, ICONS, SLOTS } from "./resources";
/**
 * @slot content-top - A slot for adding non-actionable elements above the component's content.  Content slotted here will render in place of the `icon` property.
 * @slot content-bottom - A slot for adding non-actionable elements below the component's content.
 * @slot content-start - [Deprecated] use `content-top` slot instead.  A slot for adding non-actionable elements before the component's content.
 * @slot content-end - [Deprecated] use `content-bottom` slot instead. A slot for adding non-actionable elements after the component's content.
 */
export class Tile {
    constructor() {
        this.clickHandler = () => {
            if (this.interactive) {
                this.setFocus();
                this.handleSelectEvent();
            }
        };
        // --------------------------------------------------------------------------
        //
        //  Private Methods
        //
        // --------------------------------------------------------------------------
        this.handleSelectEvent = () => {
            if (this.disabled ||
                !this.interactive ||
                (this.selectionMode === "single-persist" && this.selected === true)) {
                return;
            }
            this.calciteTileSelect.emit();
        };
        this.handleSlotChange = (event) => {
            const slotName = event.target.dataset.name;
            this[`has${slotName}`] = slotChangeHasAssignedElement(event);
        };
        this.setContainerEl = (el) => {
            this.containerEl = el;
        };
        this.active = false;
        this.alignment = "start";
        this.description = undefined;
        this.disabled = false;
        this.embed = false;
        this.heading = undefined;
        this.href = undefined;
        this.icon = undefined;
        this.iconFlipRtl = false;
        this.interactive = false;
        this.label = undefined;
        this.layout = "horizontal";
        this.scale = "m";
        this.selected = false;
        this.selectionAppearance = "icon";
        this.selectionMode = "none";
        this.hasContentBottom = false;
        this.hasContentEnd = false;
        this.hasContentStart = false;
        this.hasContentTop = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /** Sets focus on the component. */
    async setFocus() {
        await componentFocusable(this);
        if (!this.disabled && this.interactive) {
            this.containerEl?.focus();
        }
    }
    // --------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    // --------------------------------------------------------------------------
    connectedCallback() {
        connectInteractive(this);
    }
    componentDidLoad() {
        setComponentLoaded(this);
    }
    disconnectedCallback() {
        disconnectInteractive(this);
    }
    componentDidRender() {
        updateHostInteraction(this);
    }
    async componentWillLoad() {
        setUpLoadableComponent(this);
    }
    //--------------------------------------------------------------------------
    //
    //  Event Listeners
    //
    //--------------------------------------------------------------------------
    keyDownHandler(event) {
        if (event.target === this.el) {
            switch (event.key) {
                case " ":
                case "Enter":
                    this.handleSelectEvent();
                    event.preventDefault();
                    break;
                case "ArrowDown":
                case "ArrowLeft":
                case "ArrowRight":
                case "ArrowUp":
                case "Home":
                case "End":
                    this.calciteInternalTileKeyEvent.emit(event);
                    event.preventDefault();
                    break;
            }
        }
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    // --------------------------------------------------------------------------
    renderSelectionIcon() {
        const { selected, selectionAppearance, selectionMode } = this;
        if (selectionAppearance === "icon" && selectionMode !== "none") {
            return (h("calcite-icon", { class: CSS.selectionIcon, icon: selected
                    ? selectionMode === "multiple"
                        ? ICONS.selectedMultiple
                        : ICONS.selectedSingle
                    : selectionMode === "multiple"
                        ? ICONS.unselectedMultiple
                        : ICONS.unselectedSingle, scale: "s" }));
        }
        return;
    }
    renderTile() {
        const { description, disabled, hasContentBottom, hasContentEnd, hasContentStart, hasContentTop, heading, icon, iconFlipRtl, interactive, selectionMode, } = this;
        const isLargeVisual = heading && icon && !description;
        const disableInteraction = Boolean(this.href) || !interactive;
        const role = selectionMode === "multiple" && interactive
            ? "checkbox"
            : selectionMode !== "none" && interactive
                ? "radio"
                : interactive
                    ? "button"
                    : undefined;
        const hasContent = !!(description || hasContentEnd || hasContentStart || heading || icon);
        const hasOnlyContentTopAndBottom = !hasContent && hasContentTop && hasContentBottom;
        return (h("div", { "aria-checked": selectionMode !== "none" && interactive ? toAriaBoolean(this.selected) : undefined, "aria-disabled": disableInteraction ? toAriaBoolean(disabled) : undefined, "aria-label": role && this.label, class: {
                [CSS.container]: true,
                [CSS.interactive]: interactive,
                // [Deprecated] Use the content-top slot for rendering icon with alignment="center" instead
                [CSS.largeVisualDeprecated]: isLargeVisual,
                [CSS.row]: true,
                [CSS.selected]: this.selected,
            }, onClick: this.clickHandler, ref: this.setContainerEl, role: role, tabIndex: disableInteraction ? undefined : 0 }, this.renderSelectionIcon(), h("div", { class: {
                [CSS.contentContainer]: true,
                [CSS.contentContainerHasContent]: hasContent,
                [CSS.contentContainerHasOnlyContentTopAndBottom]: hasOnlyContentTopAndBottom,
            } }, h("slot", { "data-name": "ContentTop", name: SLOTS.contentTop, onSlotchange: this.handleSlotChange }), icon && h("calcite-icon", { class: CSS.icon, flipRtl: iconFlipRtl, icon: icon, scale: "l" }), h("div", { class: { [CSS.textContentContainer]: true, [CSS.row]: true } }, h("slot", { "data-name": "ContentStart", name: SLOTS.contentStart, onSlotchange: this.handleSlotChange }), h("div", { class: CSS.textContent }, heading && h("div", { class: CSS.heading }, heading), description && h("div", { class: CSS.description }, description)), h("slot", { "data-name": "ContentEnd", name: SLOTS.contentEnd, onSlotchange: this.handleSlotChange })), h("slot", { "data-name": "ContentBottom", name: SLOTS.contentBottom, onSlotchange: this.handleSlotChange }))));
    }
    render() {
        const { disabled } = this;
        return (h(InteractiveContainer, { key: '7e1367887f1ab8c6dedb788d9c3f83625202c982', disabled: disabled }, this.href ? (h("calcite-link", { disabled: disabled, href: this.href }, this.renderTile())) : (this.renderTile())));
    }
    static get is() { return "calcite-tile"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["tile.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["tile.css"]
        };
    }
    static get properties() {
        return {
            "active": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "deprecated",
                            "text": undefined
                        }],
                    "text": "When `true`, the component is active."
                },
                "attribute": "active",
                "reflect": true,
                "defaultValue": "false"
            },
            "alignment": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Exclude<Alignment, \"end\">",
                    "resolved": "\"center\" | \"start\"",
                    "references": {
                        "Exclude": {
                            "location": "global",
                            "id": "global::Exclude"
                        },
                        "Alignment": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Alignment"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the alignment of the Tile's content."
                },
                "attribute": "alignment",
                "reflect": true,
                "defaultValue": "\"start\""
            },
            "description": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "A description for the component, which displays below the heading."
                },
                "attribute": "description",
                "reflect": true
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, interaction is prevented and the component is displayed with lower opacity."
                },
                "attribute": "disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "embed": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "deprecated",
                            "text": "No longer necessary."
                        }],
                    "text": "The component's embed mode.\n\nWhen `true`, renders without a border and padding for use by other components."
                },
                "attribute": "embed",
                "reflect": true,
                "defaultValue": "false"
            },
            "heading": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The component header text, which displays between the icon and description."
                },
                "attribute": "heading",
                "reflect": true
            },
            "href": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When embed is `\"false\"`, the URL for the component."
                },
                "attribute": "href",
                "reflect": true
            },
            "icon": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies an icon to display."
                },
                "attribute": "icon",
                "reflect": true
            },
            "iconFlipRtl": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`)."
                },
                "attribute": "icon-flip-rtl",
                "reflect": true,
                "defaultValue": "false"
            },
            "interactive": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "When true, enables the tile to be focused, and allows the `calciteTileSelect` to emit.\nThis is set to `true` by a parent Tile Group component."
                },
                "attribute": "interactive",
                "reflect": false,
                "defaultValue": "false"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Accessible name for the component."
                },
                "attribute": "label",
                "reflect": false
            },
            "layout": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Exclude<Layout, \"grid\">",
                    "resolved": "\"horizontal\" | \"vertical\"",
                    "references": {
                        "Exclude": {
                            "location": "global",
                            "id": "global::Exclude"
                        },
                        "Layout": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Layout"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Defines the layout of the component.\n\nUse `\"horizontal\"` for rows, and `\"vertical\"` for a single column."
                },
                "attribute": "layout",
                "reflect": true,
                "defaultValue": "\"horizontal\""
            },
            "scale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the size of the component."
                },
                "attribute": "scale",
                "reflect": true,
                "defaultValue": "\"m\""
            },
            "selected": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "When `true` and the parent's `selectionMode` is `\"single\"`, `\"single-persist\"', or `\"multiple\"`, the component is selected."
                },
                "attribute": "selected",
                "reflect": true,
                "defaultValue": "false"
            },
            "selectionAppearance": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "SelectionAppearance",
                    "resolved": "\"border\" | \"icon\"",
                    "references": {
                        "SelectionAppearance": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::SelectionAppearance"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Specifies the selection appearance, where:\n\n- `\"icon\"` (displays a checkmark or dot), or\n- `\"border\"` (displays a border).\n\nThis property is set by the parent tile-group."
                },
                "attribute": "selection-appearance",
                "reflect": true,
                "defaultValue": "\"icon\""
            },
            "selectionMode": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Extract<\n    \"multiple\" | \"none\" | \"single\" | \"single-persist\",\n    SelectionMode\n  >",
                    "resolved": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
                    "references": {
                        "Extract": {
                            "location": "global",
                            "id": "global::Extract"
                        },
                        "SelectionMode": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::SelectionMode"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Specifies the selection mode, where:\n\n- `\"multiple\"` (allows any number of selected items),\n- `\"single\"` (allows only one selected item),\n- `\"single-persist\"` (allows only one selected item and prevents de-selection),\n- `\"none\"` (allows no selected items).\n\nThis property is set by the parent tile-group."
                },
                "attribute": "selection-mode",
                "reflect": true,
                "defaultValue": "\"none\""
            }
        };
    }
    static get states() {
        return {
            "hasContentBottom": {},
            "hasContentEnd": {},
            "hasContentStart": {},
            "hasContentTop": {}
        };
    }
    static get events() {
        return [{
                "method": "calciteInternalTileKeyEvent",
                "name": "calciteInternalTileKeyEvent",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": ""
                },
                "complexType": {
                    "original": "KeyboardEvent",
                    "resolved": "KeyboardEvent",
                    "references": {
                        "KeyboardEvent": {
                            "location": "global",
                            "id": "global::KeyboardEvent"
                        }
                    }
                }
            }, {
                "method": "calciteTileSelect",
                "name": "calciteTileSelect",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the selected state of the component changes."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "setFocus": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Sets focus on the component.",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "keydown",
                "method": "keyDownHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=tile.js.map
