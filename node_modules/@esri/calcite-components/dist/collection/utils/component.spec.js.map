{"version":3,"file":"component.spec.js","sourceRoot":"","sources":["../../../src/utils/component.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { HTMLStencilElement } from \"@stencil/core/internal\";\nimport { html } from \"../../support/formatting\";\nimport * as componentUtils from \"./component\";\nconst { componentFocusable, componentOnReady, getIconScale } = componentUtils;\n\ndescribe(\"getIconScale\", () => {\n  it('should return \"m\" when input is \"l\"', () => {\n    expect(getIconScale(\"l\")).toBe(\"m\");\n  });\n\n  it('should return \"s\" when input is not \"l\"', () => {\n    expect(getIconScale(\"m\")).toBe(\"s\");\n    expect(getIconScale(\"s\")).toBe(\"s\");\n  });\n});\n\ndescribe(\"componentOnReady\", () => {\n  let requestAnimationFrameSpy: jest.SpyInstance;\n  let fakeComponent: HTMLElement;\n\n  beforeEach(() => {\n    document.body.innerHTML = html`<fake-component></fake-component> `;\n    fakeComponent = document.querySelector<HTMLElement>(\"fake-component\");\n\n    const originalRaf = globalThis.requestAnimationFrame;\n    requestAnimationFrameSpy = jest\n      .spyOn(globalThis, \"requestAnimationFrame\")\n      .mockImplementation((callback) => originalRaf(callback));\n  });\n\n  afterEach(() => requestAnimationFrameSpy.mockRestore());\n\n  it(\"should call componentOnReady if it exists on the element (lazy-loaded)\", async () => {\n    const componentOnReadyStub = ((fakeComponent as HTMLStencilElement).componentOnReady = jest.fn());\n\n    const promise = componentOnReady(fakeComponent);\n    expect(promise).toBeInstanceOf(Promise);\n\n    await promise;\n    expect(componentOnReadyStub).toHaveBeenCalled();\n  });\n\n  it(\"waits for an animation frame if componentOnReady does not exist on the element\", async () => {\n    expect(requestAnimationFrameSpy).not.toHaveBeenCalled();\n\n    const promise = componentOnReady(fakeComponent);\n    expect(promise).toBeInstanceOf(Promise);\n\n    await promise;\n    expect(requestAnimationFrameSpy).toHaveBeenCalled();\n  });\n});\n\ndescribe(\"componentFocusable\", () => {\n  let componentOnReadyStub: jest.SpyInstance;\n  let fakeComponent: HTMLStencilElement;\n  let forceUpdateSpy: jest.SpyInstance;\n  let requestAnimationFrameSpy: jest.SpyInstance;\n  let componentOnReadyResolver: (el: HTMLStencilElement) => void;\n\n  beforeEach(async () => {\n    document.body.innerHTML = html`<fake-component></fake-component> `;\n    fakeComponent = document.querySelector<HTMLStencilElement>(\"fake-component\");\n\n    const componentOnReadyPromise = new Promise<HTMLStencilElement>(\n      (resolve: (el: HTMLStencilElement) => void) => (componentOnReadyResolver = resolve),\n    );\n    componentOnReadyStub = fakeComponent.componentOnReady = jest.fn(() => componentOnReadyPromise);\n    forceUpdateSpy = jest.spyOn(componentUtils, \"forceUpdate\").mockImplementation(jest.fn());\n\n    const originalRaf = globalThis.requestAnimationFrame;\n    requestAnimationFrameSpy = jest\n      .spyOn(globalThis, \"requestAnimationFrame\")\n      .mockImplementation((callback) => originalRaf(callback));\n  });\n\n  afterEach(() => {\n    requestAnimationFrameSpy.mockRestore();\n    forceUpdateSpy.mockRestore();\n  });\n\n  it(\"should resolve when ready and rendered\", async () => {\n    const promise = componentFocusable(fakeComponent);\n    expect(promise).toBeInstanceOf(Promise);\n\n    expect(componentOnReadyStub).toHaveBeenCalled();\n    expect(requestAnimationFrameSpy).not.toHaveBeenCalled();\n    expect(forceUpdateSpy).not.toHaveBeenCalled();\n\n    componentOnReadyResolver(fakeComponent);\n    await promise;\n\n    expect(forceUpdateSpy).toHaveBeenCalled();\n    expect(requestAnimationFrameSpy).toHaveBeenCalled();\n  });\n});\n"]}