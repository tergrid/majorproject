{"file":"calcite-segmented-control-item.js","mappings":";;;;;;;;;AAEO,MAAM,KAAK,GAAG;IACnB,KAAK,EAAE,OAAO;CACf,CAAC;AAEK,MAAM,GAAG,GAAG;IACjB,KAAK,EAAE,OAAO;IACd,UAAU,EAAE,CAAC,KAAY,KAAK,gBAAgB,KAAK,EAAW;IAC9D,eAAe,EAAE,mBAAmB;IACpC,YAAY,EAAE,gBAAgB;IAC9B,gBAAgB,EAAE,qBAAqB;IACvC,IAAI,EAAE,MAAM;IACZ,QAAQ,EAAE,YAAY;CACvB;;ACdD,MAAM,uBAAuB,GAAG,0wGAA0wG,CAAC;AAC3yG,0CAAe,uBAAuB;;MCoBzB,oBAAoB;;;;;;;;;;;QAmHvB,qBAAgB,GAAG,CAAC,KAAY;YACtC,IAAI,CAAC,iBAAiB,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;SACtD,CAAC;uBA5GgD,KAAK;2BAQhB,KAAK;;;;0BAmBoC,OAAO;sBAO9D,YAAY;qBAOd,GAAG;iCA6EG,KAAK;;IAnHxB,mBAAmB;QAC3B,IAAI,CAAC,yCAAyC,CAAC,IAAI,EAAE,CAAC;KACvD;;;;;;IA4CO,UAAU,CAAC,IAAY,EAAE,OAAgB,KAAK;QACpD,OAAO,IAAI,IACT,oBACE,KAAK,EAAE;gBACL,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI;gBAChB,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI;aACrB,EACD,OAAO,EAAE,IAAI,CAAC,WAAW,EACzB,IAAI,EAAE,IAAI,EACV,KAAK,EAAC,GAAG,GACT,IACA,IAAI,CAAC;KACV;IAED,MAAM;QACJ,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QAE3D,QACE,EAAC,IAAI,qEAAe,aAAa,CAAC,OAAO,CAAC,gBAAc,KAAK,EAAE,IAAI,EAAC,OAAO,IACzE,8DACE,KAAK,EAAE;gBACL,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI;gBACjB,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI;gBAC7B,CAAC,GAAG,CAAC,eAAe,GAAG,MAAM,KAAK,YAAY;gBAC9C,CAAC,GAAG,CAAC,YAAY,GAAG,UAAU,KAAK,SAAS;gBAC5C,CAAC,GAAG,CAAC,gBAAgB,GAAG,UAAU,KAAK,cAAc;aACtD,IAEA,IAAI,CAAC,aAAa,EAAE,CACf,CACH,EACP;KACH;IAEO,aAAa;QACnB,MAAM,EAAE,iBAAiB,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;QACvD,MAAM,aAAa,GAAG,SAAS,IAAI,OAAO,CAAC;QAC3C,MAAM,iBAAiB,GAAG,CAAC,iBAAiB,IAAI,aAAa,CAAC;QAE9D,IAAI,iBAAiB,EAAE;YACrB,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,IAAI,CAAC,EAAE,YAAM,YAAY,EAAE,IAAI,CAAC,gBAAgB,GAAI,CAAC,CAAC;SAC9F;QAED,OAAO;YACL,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;YAC1B,YAAM,YAAY,EAAE,IAAI,CAAC,gBAAgB,GAAI;YAC7C,YAAM,IAAI,EAAE,KAAK,CAAC,KAAK,GAAI;YAC3B,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;SACzB,CAAC;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/segmented-control-item/resources.ts","src/components/segmented-control-item/segmented-control-item.scss?tag=calcite-segmented-control-item&encapsulation=shadow","src/components/segmented-control-item/segmented-control-item.tsx"],"sourcesContent":["import { Scale } from \"../interfaces\";\n\nexport const SLOTS = {\n  input: \"input\",\n};\n\nexport const CSS = {\n  label: \"label\",\n  labelScale: (scale: Scale) => `label--scale-${scale}` as const,\n  labelHorizontal: \"label--horizontal\",\n  labelOutline: \"label--outline\",\n  labelOutlineFill: \"label--outline-fill\",\n  icon: \"icon\",\n  iconSolo: \"icon--solo\",\n};\n",":host {\n  @apply flex\n    cursor-pointer\n    self-stretch\n    font-normal;\n  transition:\n    background-color var(--calcite-internal-animation-timing-fast) ease-in-out,\n    border-color var(--calcite-animation-timing) ease-in-out;\n}\n\n:host label {\n  @apply text-color-3\n    pointer-events-none\n    m-0.5\n    box-border\n    flex\n    flex-1\n    items-center;\n  transition:\n    background-color var(--calcite-internal-animation-timing-fast) ease-in-out,\n    border-color var(--calcite-internal-animation-timing-fast) ease-in-out,\n    color var(--calcite-internal-animation-timing-fast) ease-in-out;\n}\n\n.label--horizontal {\n  @apply justify-center;\n}\n\n// focus styles\n:host {\n  @apply focus-base;\n}\n:host(:focus) {\n  @apply focus-inset;\n  outline-offset: -1px;\n}\n\n.label--scale-s {\n  @apply text-n2h px-2;\n  padding-block: 0.125rem;\n}\n\n.label--scale-m {\n  @apply text-n1h px-3;\n  padding-block: 0.375rem;\n}\n\n.label--scale-l {\n  @apply text-0h px-4 py-2.5;\n}\n\n:host(:hover) label {\n  @apply bg-foreground-2 text-color-1;\n}\n\n:host(:active) label {\n  @apply bg-foreground-3;\n}\n\n:host([checked]) label {\n  @apply bg-brand border-color-brand cursor-default text-color-inverse;\n}\n\n:host([checked]) .label--outline,\n:host([checked]) .label--outline-fill {\n  @apply bg-foreground-1 border-color-brand;\n  box-shadow: inset 0 0 0 1px theme(\"backgroundColor.brand\");\n  color: theme(\"backgroundColor.brand\");\n}\n\n:host([checked]) .label--outline {\n  @apply bg-transparent;\n}\n\n::slotted(input) {\n  @apply hidden;\n}\n\n@media (forced-colors: active) {\n  :host([checked]) label {\n    background-color: highlight;\n  }\n  :host([checked]) .label--outline,\n  :host([checked]) .label--outline-fill {\n    @apply outline-none;\n  }\n  :host([checked]) label:not([class~=\"label--outline\"]) .icon {\n    color: highlightText;\n  }\n}\n\n.icon {\n  @apply relative\n    m-0\n    inline-flex;\n  line-height: inherit;\n\n  margin-inline-start: var(--calcite-internal-segmented-control-icon-margin-start);\n  margin-inline-end: var(--calcite-internal-segmented-control-icon-margin-end);\n}\n\n:host([icon-start]) .label--scale-s {\n  --calcite-internal-segmented-control-icon-margin-end: theme(\"margin.2\");\n}\n\n:host([icon-end]) .label--scale-s {\n  --calcite-internal-segmented-control-icon-margin-start: theme(\"margin.2\");\n}\n\n:host([icon-start]) .label--scale-m {\n  --calcite-internal-segmented-control-icon-margin-end: theme(\"margin.3\");\n}\n\n:host([icon-end]) .label--scale-m {\n  --calcite-internal-segmented-control-icon-margin-start: theme(\"margin.3\");\n}\n\n:host([icon-start]) .label--scale-l {\n  --calcite-internal-segmented-control-icon-margin-end: theme(\"margin.4\");\n}\n\n:host([icon-end]) .label--scale-l {\n  --calcite-internal-segmented-control-icon-margin-start: theme(\"margin.4\");\n}\n\n.label .icon--solo {\n  --calcite-internal-segmented-control-icon-margin-start: 0;\n  --calcite-internal-segmented-control-icon-margin-end: 0;\n}\n\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { slotChangeHasContent, toAriaBoolean } from \"../../utils/dom\";\nimport { Appearance, Layout, Scale } from \"../interfaces\";\nimport { CSS, SLOTS } from \"./resources\";\n\n@Component({\n  tag: \"calcite-segmented-control-item\",\n  styleUrl: \"segmented-control-item.scss\",\n  shadow: true,\n})\nexport class SegmentedControlItem {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** When `true`, the component is checked. */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by form module\n  @Prop({ reflect: true, mutable: true }) checked = false;\n\n  @Watch(\"checked\")\n  protected handleCheckedChange(): void {\n    this.calciteInternalSegmentedControlItemChange.emit();\n  }\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /** Specifies an icon to display at the start of the component. */\n  @Prop({ reflect: true }) iconStart: string;\n\n  /** Specifies an icon to display at the end of the component. */\n  @Prop({ reflect: true }) iconEnd: string;\n\n  /**\n   * The component's value.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by form module\n  @Prop({ mutable: true }) value: any | null;\n\n  /**\n   * Specifies the appearance style of the component inherited from parent `calcite-segmented-control`, defaults to `solid`.\n   *\n   * @internal\n   */\n  @Prop() appearance: Extract<\"outline\" | \"outline-fill\" | \"solid\", Appearance> = \"solid\";\n\n  /**\n   * Defines the layout of the component inherited from parent `calcite-segmented-control`, defaults to `horizontal`.\n   *\n   * @internal\n   */\n  @Prop() layout: Layout = \"horizontal\";\n\n  /**\n   * Specifies the size of the component inherited from the `calcite-segmented-control`, defaults to `m`.\n   *\n   * @internal\n   */\n  @Prop() scale: Scale = \"m\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  private renderIcon(icon: string, solo: boolean = false): VNode {\n    return icon ? (\n      <calcite-icon\n        class={{\n          [CSS.icon]: true,\n          [CSS.iconSolo]: solo,\n        }}\n        flipRtl={this.iconFlipRtl}\n        icon={icon}\n        scale=\"s\"\n      />\n    ) : null;\n  }\n\n  render(): VNode {\n    const { appearance, checked, layout, scale, value } = this;\n\n    return (\n      <Host aria-checked={toAriaBoolean(checked)} aria-label={value} role=\"radio\">\n        <label\n          class={{\n            [CSS.label]: true,\n            [CSS.labelScale(scale)]: true,\n            [CSS.labelHorizontal]: layout === \"horizontal\",\n            [CSS.labelOutline]: appearance === \"outline\",\n            [CSS.labelOutlineFill]: appearance === \"outline-fill\",\n          }}\n        >\n          {this.renderContent()}\n        </label>\n      </Host>\n    );\n  }\n\n  private renderContent(): VNode | VNode[] {\n    const { hasSlottedContent, iconEnd, iconStart } = this;\n    const effectiveIcon = iconStart || iconEnd;\n    const canRenderIconOnly = !hasSlottedContent && effectiveIcon;\n\n    if (canRenderIconOnly) {\n      return [this.renderIcon(effectiveIcon, true), <slot onSlotchange={this.handleSlotChange} />];\n    }\n\n    return [\n      this.renderIcon(iconStart),\n      <slot onSlotchange={this.handleSlotChange} />,\n      <slot name={SLOTS.input} />,\n      this.renderIcon(iconEnd),\n    ];\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private handleSlotChange = (event: Event): void => {\n    this.hasSlottedContent = slotChangeHasContent(event);\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteSegmentedControlItemElement;\n\n  @State() hasSlottedContent = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the item has been selected.\n   *\n   * @internal\n   */\n  @Event({ cancelable: false })\n  calciteInternalSegmentedControlItemChange: EventEmitter<void>;\n}\n"],"version":3}