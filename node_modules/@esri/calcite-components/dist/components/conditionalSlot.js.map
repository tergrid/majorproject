{"file":"conditionalSlot.js","mappings":";;;;;;;;AAmBA,IAAI,gBAA0C,CAAC;AAC/C,MAAM,eAAe,GAAkE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;AAE3G;;;;;;;;;;SAUgB,+BAA+B,CAAC,SAAmC;IACjF,IAAI,CAAC,gBAAgB,EAAE;QACrB,gBAAgB,GAAG,cAAc,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;KACjE;IAED,gBAAgB,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,EAAE,eAAe,CAAC,CAAC;AAC1D,CAAC;AAED;;;;;;;;;;SAUgB,kCAAkC,CAAC,SAAmC;IACpF,gBAAgB,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;AAC3C,CAAC;AAED,SAAS,gBAAgB,CAAC,SAA2B;IACnD,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,EAAE;QAC3B,WAAW,CAAC,MAAM,CAAC,CAAC;KACrB,CAAC,CAAC;AACL;;;;","names":[],"sources":["src/utils/conditionalSlot.ts"],"sourcesContent":["import { forceUpdate } from \"@stencil/core\";\nimport { createObserver, ExtendedMutationObserver } from \"./observers\";\n\n/**\n * Defines interface for components with a dynamically changing slot.\n *\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport interface ConditionalSlotComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n}\n\nlet mutationObserver: ExtendedMutationObserver;\nconst observerOptions: Pick<Parameters<MutationObserver[\"observe\"]>[1], \"childList\"> = { childList: true };\n\n/**\n * Helper to set up a conditional slot component on connectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function connectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  if (!mutationObserver) {\n    mutationObserver = createObserver(\"mutation\", processMutations);\n  }\n\n  mutationObserver.observe(component.el, observerOptions);\n}\n\n/**\n * Helper to tear down a conditional slot component on disconnectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function disconnectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  mutationObserver.unobserve(component.el);\n}\n\nfunction processMutations(mutations: MutationRecord[]): void {\n  mutations.forEach(({ target }) => {\n    forceUpdate(target);\n  });\n}\n"],"version":3}