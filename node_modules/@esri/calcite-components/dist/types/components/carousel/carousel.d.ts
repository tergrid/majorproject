import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { LocalizedComponent } from "../../utils/locale";
import { InteractiveComponent } from "../../utils/interactive";
import { LoadableComponent } from "../../utils/loadable";
import { T9nComponent } from "../../utils/t9n";
import { CarouselMessages } from "./assets/carousel/t9n";
import { ArrowType, AutoplayType } from "./interfaces";
/**
 * @slot - A slot for adding `calcite-carousel-item`s.
 */
export declare class Carousel implements InteractiveComponent, LoadableComponent, LocalizedComponent, T9nComponent {
    /**
     * When `true`, the carousel will autoplay and controls will be displayed. When "paused" at time of initialization, the carousel will not autoplay, but controls will be displayed.
     */
    autoplay: AutoplayType;
    autoplayWatcher(autoplay: boolean): void;
    /**
     * Specifies how and if the "previous" and "next" arrows are displayed.
     */
    arrowType: ArrowType;
    /**
     *  When `autoplay` is `true`, specifies in milliseconds the length of time to display each Carousel Item.
     */
    autoplayDuration: number;
    /**
     * Specifies if the component's controls are positioned absolutely on top of slotted Carousel Items.
     */
    controlOverlay: boolean;
    /**
     * When `true`, interaction is prevented and the component is displayed with lower opacity.
     */
    disabled: boolean;
    /**
     * Accessible name for the component.
     */
    label: string;
    /**
     * Made into a prop for testing purposes only
     *
     * @internal
     */
    messages: CarouselMessages;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<CarouselMessages>;
    onMessagesChange(): void;
    /**
     * Made into a prop for testing purposes only
     *
     * @internal
     */
    paused: boolean;
    /**
     * The component's selected `calcite-carousel-item`.
     *
     * @readonly
     */
    selectedItem: HTMLCalciteCarouselItemElement;
    connectedCallback(): void;
    componentDidLoad(): void;
    componentDidRender(): void;
    disconnectedCallback(): void;
    componentWillLoad(): Promise<void>;
    /** Sets focus on the component. */
    setFocus(): Promise<void>;
    /** Play the carousel. If `autoplay` is not enabled (initialized either to `true` or `"paused"`), these methods will have no effect. */
    play(): Promise<void>;
    /** Stop the carousel. If `autoplay` is not enabled (initialized either to `true` or `"paused"`), these methods will have no effect. */
    stop(): Promise<void>;
    el: HTMLCalciteCarouselElement;
    selectedIndex: number;
    items: HTMLCalciteCarouselItemElement[];
    direction: "forward" | "backward" | "standby";
    directionWatcher(direction: string): Promise<void>;
    defaultMessages: CarouselMessages;
    playing: boolean;
    playingWatcher(): void;
    suspendedDueToFocus: boolean;
    suspendedDueToHover: boolean;
    suspendWatcher(): void;
    userPreventsSuspend: boolean;
    effectiveLocale: string;
    effectiveLocaleChange(): Promise<void>;
    suspendedSlideDurationRemaining: number;
    slideDurationRemaining: number;
    private container;
    private containerId;
    private slideDurationInterval;
    private slideInterval;
    private tabList;
    /** Fires when the selected `calcite-carousel-item` changes. */
    calciteCarouselChange: EventEmitter<void>;
    /** Fires when the carousel autoplay is invoked by the user. */
    calciteCarouselPlay: EventEmitter<void>;
    /** Fires when the carousel autoplay state is stopped by a user. */
    calciteCarouselStop: EventEmitter<void>;
    /** Fires when the carousel autoplay state pauses due to a user hovering over the component or focusing on the component or slotted content */
    calciteCarouselPause: EventEmitter<void>;
    /** Fires when the carousel autoplay state resumes due to a user no longer hovering over the component or focusing on the component or slotted content */
    calciteCarouselResume: EventEmitter<void>;
    private clearIntervals;
    private nextItem;
    private previousItem;
    private handlePlay;
    private handlePause;
    private suspendStart;
    private suspendEnd;
    private autoplayHandler;
    private timer;
    private handleSlotChange;
    private setSelectedItem;
    private handleArrowClick;
    private handleItemSelection;
    private toggleRotation;
    private handleFocusIn;
    private handleMouseIn;
    private handleMouseOut;
    private handleFocusOut;
    private containerKeyDownHandler;
    private tabListKeyDownHandler;
    private storeTabListRef;
    private storeContainerRef;
    private itemContainer;
    private storeItemContainerRef;
    renderRotationControl: () => VNode;
    renderPaginationArea: () => VNode;
    renderPaginationItems: () => VNode;
    renderArrow: (direction: "previous" | "next") => VNode;
    render(): VNode;
}
