import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { FormComponent, MutableValidityState } from "../../utils/form";
import { InteractiveComponent } from "../../utils/interactive";
import { LabelableComponent } from "../../utils/label";
import { LoadableComponent } from "../../utils/loadable";
import { LocalizedComponent } from "../../utils/locale";
import { T9nComponent } from "../../utils/t9n";
import { Alignment, Scale, Status } from "../interfaces";
import { TextualInputComponent } from "../input/common/input";
import { InputTextMessages } from "./assets/input-text/t9n";
/**
 * @slot action - A slot for positioning a button next to the component.
 */
export declare class InputText implements LabelableComponent, FormComponent, InteractiveComponent, LoadableComponent, LocalizedComponent, TextualInputComponent, T9nComponent {
    handleGlobalAttributesChanged(): void;
    /** Specifies the text alignment of the component's value. */
    alignment: Extract<"start" | "end", Alignment>;
    /**
     * Adds global prop, missing from Stencil's `HTMLElement` type, see https://github.com/ionic-team/stencil/issues/5726
     *
     * @ignore
     */
    autofocus: boolean;
    /**
     * When `true`, a clear button is displayed when the component has a value.
     */
    clearable: boolean;
    /**
     * When `true`, interaction is prevented and the component is displayed with lower opacity.
     *
     * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
     */
    disabled: boolean;
    disabledWatcher(): void;
    /**
     * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123
     *
     * @futureBreaking kebab-cased attribute will not be supported in a future release
     * @internal
     */
    enterKeyHint: string;
    /**
     * The `id` of the form that will be associated with the component.
     *
     * When not set, the component will be associated with its ancestor form element, if any.
     */
    form: string;
    /**
     * Specifies an icon to display.
     *
     * @futureBreaking Remove boolean type as it is not supported.
     */
    icon: string | boolean;
    /** When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`). */
    iconFlipRtl: boolean;
    /**
     * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123
     *
     * @futureBreaking kebab-cased attribute will not be supported in a future release
     * @internal
     */
    inputMode: string;
    /** Accessible name for the component's button or hyperlink. */
    label: string;
    /** When `true`, the component is in the loading state and `calcite-progress` is displayed. */
    loading: boolean;
    /**
     * Specifies the maximum length of text for the component's value.
     *
     * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
     */
    maxLength: number;
    /**
     * Specifies the minimum length of text for the component's value.
     *
     * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
     */
    minLength: number;
    /** Specifies the validation message to display under the component. */
    validationMessage: string;
    /** Specifies the validation icon to display under the component. */
    validationIcon: string | boolean;
    /**
     * The current validation state of the component.
     *
     * @readonly
     * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
     */
    validity: MutableValidityState;
    /**
     * Specifies the name of the component.
     *
     * Required to pass the component's `value` on form submission.
     *
     * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
     */
    name: string;
    /**
     * Specifies placeholder text for the component.
     *
     * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
     */
    placeholder: string;
    /** Adds text to the start of the component. */
    prefixText: string;
    /**
     * When `true`, the component's value can be read, but cannot be modified.
     *
     * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
     */
    readOnly: boolean;
    /** When `true`, the component must have a value in order for the form to submit. */
    required: boolean;
    /** Specifies the size of the component. */
    scale: Scale;
    /** Specifies the status of the input field, which determines message and icons. */
    status: Status;
    /**
     * Specifies the type of content to autocomplete, for use in forms.
     * Read the native attribute's documentation on MDN for more info.
     *
     * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autocomplete: string;
    /**
     * Specifies a regex pattern the component's `value` must match for validation.
     * Read the native attribute's documentation on MDN for more info.
     *
     * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)
     */
    pattern: string;
    /** Adds text to the end of the component.  */
    suffixText: string;
    /**
     * @internal
     */
    editingEnabled: boolean;
    /** The component's value. */
    value: string;
    /**
     * Made into a prop for testing purposes only
     *
     * @internal
     */
    messages: InputTextMessages;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<InputTextMessages>;
    onMessagesChange(): void;
    valueWatcher(newValue: string, previousValue: string): void;
    updateRequestedIcon(): void;
    el: HTMLCalciteInputTextElement;
    labelEl: HTMLCalciteLabelElement;
    formEl: HTMLFormElement;
    defaultValue: InputText["value"];
    inlineEditableEl: HTMLCalciteInlineEditableElement;
    /** keep track of the rendered child */
    private childEl?;
    get isClearable(): boolean;
    private previousEmittedValue;
    private previousValue;
    private previousValueOrigin;
    /** the computed icon to render */
    private requestedIcon?;
    mutationObserver: import("../../utils/observers").ExtendedMutationObserver;
    private userChangedValue;
    effectiveLocale: string;
    effectiveLocaleChange(): void;
    defaultMessages: InputTextMessages;
    slottedActionElDisabledInternally: boolean;
    connectedCallback(): void;
    disconnectedCallback(): void;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    componentDidRender(): void;
    /**
     * @internal
     */
    calciteInternalInputTextFocus: EventEmitter<{
        element: HTMLInputElement;
        value: string;
    }>;
    /**
     * @internal
     */
    calciteInternalInputTextBlur: EventEmitter<{
        element: HTMLInputElement;
        value: string;
    }>;
    /**
     * Fires each time a new value is typed.
     */
    calciteInputTextInput: EventEmitter<void>;
    /**
     * Fires each time a new value is typed and committed.
     */
    calciteInputTextChange: EventEmitter<void>;
    /** Sets focus on the component. */
    setFocus(): Promise<void>;
    /** Selects the text of the component's `value`. */
    selectText(): Promise<void>;
    keyDownHandler: (event: KeyboardEvent) => void;
    onLabelClick(): void;
    private clearInputTextValue;
    private emitChangeIfUserModified;
    private inputTextBlurHandler;
    private clickHandler;
    private inputTextFocusHandler;
    private inputTextInputHandler;
    private inputTextKeyDownHandler;
    syncHiddenFormInput(input: HTMLInputElement): void;
    private onHiddenFormInputInput;
    private setChildElRef;
    private setDisabledAction;
    private setInputValue;
    private setPreviousEmittedValue;
    private setPreviousValue;
    private setValue;
    render(): VNode;
}
