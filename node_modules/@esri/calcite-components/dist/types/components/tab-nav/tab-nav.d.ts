import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { FocusElementInGroupDestination } from "../../utils/dom";
import { Scale } from "../interfaces";
import { TabChangeEventDetail, TabCloseEventDetail } from "../tab/interfaces";
import { TabID, TabLayout, TabPosition } from "../tabs/interfaces";
import { LocalizedComponent } from "../../utils/locale";
import { T9nComponent } from "../../utils/t9n";
import { TabNavMessages } from "./assets/tab-nav/t9n";
/**
 * @slot - A slot for adding `calcite-tab-title`s.
 */
export declare class TabNav implements LocalizedComponent, T9nComponent {
    /**
     * Specifies the name when saving selected `calcite-tab` data to `localStorage`.
     */
    storageId: string;
    /**
     * Specifies text to update multiple components to keep in sync if one changes.
     */
    syncId: string;
    /**
     * Specifies the component's selected `calcite-tab-title`.
     *
     * @readonly
     */
    selectedTitle: HTMLCalciteTabTitleElement;
    /**
     * Specifies the size of the component inherited from the parent `calcite-tabs`, defaults to `m`.
     *
     * @internal
     */
    scale: Scale;
    /**
     * @internal
     */
    layout: TabLayout;
    /**
     * Specifies the position of `calcite-tab-nav` and `calcite-tab-title` components in relation to, and is inherited from the parent `calcite-tabs`, defaults to `top`.
     *
     *  @internal
     */
    position: TabPosition;
    /**
     * @internal
     */
    bordered: boolean;
    /**
     * @internal
     */
    indicatorOffset: number;
    /**
     * @internal
     */
    indicatorWidth: number;
    /**
     * Made into a prop for testing purposes only.
     *
     * @internal
     */
    messages: TabNavMessages;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<TabNavMessages>;
    onMessagesChange(): void;
    selectedTabIdChanged(): Promise<void>;
    selectedTitleChanged(): void;
    connectedCallback(): void;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    componentWillRender(): void;
    componentDidRender(): void;
    disconnectedCallback(): void;
    render(): VNode;
    focusPreviousTabHandler(event: CustomEvent): void;
    focusNextTabHandler(event: CustomEvent): void;
    focusFirstTabHandler(event: CustomEvent): void;
    focusLastTabHandler(event: CustomEvent): void;
    internalActivateTabHandler(event: CustomEvent<TabChangeEventDetail>): void;
    private scrollTabTitleIntoView;
    activateTabHandler(event: CustomEvent<void>): void;
    internalCloseTabHandler(event: CustomEvent<TabCloseEventDetail>): void;
    /**
     * Check for active tabs on register and update selected
     *
     * @param event
     */
    updateTabTitles(event: CustomEvent<TabID>): void;
    globalInternalTabChangeHandler(event: CustomEvent<TabChangeEventDetail>): void;
    iconStartChangeHandler(): void;
    /**
     * Emits when the selected `calcite-tab` changes.
     */
    calciteTabChange: EventEmitter<void>;
    /**
     * @internal
     */
    calciteInternalTabChange: EventEmitter<TabChangeEventDetail>;
    el: HTMLCalciteTabNavElement;
    defaultMessages: TabNavMessages;
    effectiveLocale: string;
    effectiveLocaleChange(): void;
    private hasOverflowingStartTabTitle;
    private hasOverflowingEndTabTitle;
    private selectedTabId;
    private activeIndicatorEl;
    private activeIndicatorContainerEl;
    private containerEl;
    private effectiveDir;
    private lastScrollWheelAxis;
    private parentTabsEl;
    private tabTitleContainerEl;
    private intersectionObserver;
    private resizeObserver;
    private get scrollerButtonWidth();
    private updateActiveIndicator;
    private onTabTitleWheel;
    private onSlotChange;
    private storeContainerRef;
    private storeTabTitleWrapperRef;
    private updateScrollingState;
    private scrollToTabTitles;
    private scrollToNextTabTitles;
    private scrollToPreviousTabTitles;
    handleTabFocus: (event: CustomEvent, el: HTMLCalciteTabTitleElement, destination: FocusElementInGroupDestination) => void;
    getIndexOfTabTitle(el: HTMLCalciteTabTitleElement, tabTitles?: HTMLCalciteTabTitleElement[]): number;
    private onTabTitleScroll;
    getTabTitleById(id: TabID): Promise<HTMLCalciteTabTitleElement | null>;
    get tabTitles(): HTMLCalciteTabTitleElement[];
    get enabledTabTitles(): HTMLCalciteTabTitleElement[];
    private handleTabTitleClose;
    private renderScrollButton;
}
