import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { InteractiveComponent } from "../../utils/interactive";
import { Alignment, Layout, Scale, SelectionAppearance, SelectionMode } from "../interfaces";
import { SelectableGroupComponent } from "../../utils/selectableComponent";
/**
 * @slot - A slot for adding `calcite-tile` elements.
 */
export declare class TileGroup implements InteractiveComponent, SelectableGroupComponent {
    /**
     * Specifies the alignment of each `calcite-tile`'s content.
     */
    alignment: Exclude<Alignment, "end">;
    /** When `true`, interaction is prevented and the component is displayed with lower opacity. */
    disabled: boolean;
    /** Accessible name for the component. */
    label: string;
    /**
     * Defines the layout of the component.
     *
     * Use `"horizontal"` for rows, and `"vertical"` for a single column.
     */
    layout: Exclude<Layout, "grid">;
    /**
     * Specifies the size of the component.
     */
    scale: Scale;
    scaleWatcher(): void;
    /**
     * Specifies the component's selected items.
     *
     * @readonly
     */
    selectedItems: HTMLCalciteTileElement[];
    /**
     * Specifies the selection appearance, where:
     *
     * - `"icon"` (displays a checkmark or dot), or
     * - `"border"` (displays a border).
     */
    selectionAppearance: SelectionAppearance;
    /**
     * Specifies the selection mode, where:
     *
     * - `"multiple"` (allows any number of selected items),
     * - `"single"` (allows only one selected item),
     * - `"single-persist"` (allows only one selected item and prevents de-selection),
     * - `"none"` (allows no selected items).
     */
    selectionMode: Extract<"multiple" | "none" | "single" | "single-persist", SelectionMode>;
    handleSelectionModeOrAppearanceChange(): void;
    el: HTMLCalciteTileGroupElement;
    private items;
    private slotEl;
    private getSlottedTiles;
    private mutationObserver;
    private selectItem;
    private setSlotEl;
    private updateSelectedItems;
    private updateTiles;
    /** Fires when the component's selection changes. */
    calciteTileGroupSelect: EventEmitter<void>;
    connectedCallback(): void;
    componentDidRender(): void;
    disconnectedCallback(): void;
    calciteInternalTileKeyEventListener(event: CustomEvent): void;
    calciteTileSelectHandler(event: CustomEvent): void;
    render(): VNode;
}
