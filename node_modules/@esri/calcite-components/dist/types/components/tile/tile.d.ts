import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { InteractiveComponent } from "../../utils/interactive";
import { Alignment, Layout, Scale, SelectionAppearance, SelectionMode } from "../interfaces";
import { SelectableComponent } from "../../utils/selectableComponent";
/**
 * @slot content-top - A slot for adding non-actionable elements above the component's content.  Content slotted here will render in place of the `icon` property.
 * @slot content-bottom - A slot for adding non-actionable elements below the component's content.
 * @slot content-start - [Deprecated] use `content-top` slot instead.  A slot for adding non-actionable elements before the component's content.
 * @slot content-end - [Deprecated] use `content-bottom` slot instead. A slot for adding non-actionable elements after the component's content.
 */
export declare class Tile implements InteractiveComponent, SelectableComponent {
    /**
     * When `true`, the component is active.
     *
     * @deprecated
     */
    active: boolean;
    /**
     * Specifies the alignment of the Tile's content.
     */
    alignment: Exclude<Alignment, "end">;
    /**
     * A description for the component, which displays below the heading.
     */
    description: string;
    /**
     * When `true`, interaction is prevented and the component is displayed with lower opacity.
     */
    disabled: boolean;
    /**
     * The component's embed mode.
     *
     * When `true`, renders without a border and padding for use by other components.
     *
     * @deprecated No longer necessary.
     */
    embed: boolean;
    /** The component header text, which displays between the icon and description. */
    heading: string;
    /** When embed is `"false"`, the URL for the component. */
    href: string;
    /** Specifies an icon to display. */
    icon: string;
    /** When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`). */
    iconFlipRtl: boolean;
    /**
     * When true, enables the tile to be focused, and allows the `calciteTileSelect` to emit.
     * This is set to `true` by a parent Tile Group component.
     *
     * @internal
     */
    interactive: boolean;
    /** Accessible name for the component. */
    label: string;
    /**
     * Defines the layout of the component.
     *
     * Use `"horizontal"` for rows, and `"vertical"` for a single column.
     *
     * @internal
     */
    layout: Exclude<Layout, "grid">;
    /**
     * Specifies the size of the component.
     */
    scale: Scale;
    /**
     * When `true` and the parent's `selectionMode` is `"single"`, `"single-persist"', or `"multiple"`, the component is selected.
     *
     * @internal
     */
    selected: boolean;
    /**
     * Specifies the selection appearance, where:
     *
     * - `"icon"` (displays a checkmark or dot), or
     * - `"border"` (displays a border).
     *
     * This property is set by the parent tile-group.
     *
     * @internal
     */
    selectionAppearance: SelectionAppearance;
    /**
     * Specifies the selection mode, where:
     *
     * - `"multiple"` (allows any number of selected items),
     * - `"single"` (allows only one selected item),
     * - `"single-persist"` (allows only one selected item and prevents de-selection),
     * - `"none"` (allows no selected items).
     *
     * This property is set by the parent tile-group.
     *
     * @internal
     */
    selectionMode: Extract<"multiple" | "none" | "single" | "single-persist", SelectionMode>;
    /** Sets focus on the component. */
    setFocus(): Promise<void>;
    el: HTMLCalciteTileElement;
    private clickHandler;
    private containerEl;
    hasContentBottom: boolean;
    hasContentEnd: boolean;
    hasContentStart: boolean;
    hasContentTop: boolean;
    /**
     * @internal
     */
    calciteInternalTileKeyEvent: EventEmitter<KeyboardEvent>;
    /**
     * Fires when the selected state of the component changes.
     */
    calciteTileSelect: EventEmitter<void>;
    private handleSelectEvent;
    private handleSlotChange;
    private setContainerEl;
    connectedCallback(): void;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    componentDidRender(): void;
    componentWillLoad(): Promise<void>;
    keyDownHandler(event: KeyboardEvent): void;
    renderSelectionIcon(): VNode;
    renderTile(): VNode;
    render(): VNode;
}
